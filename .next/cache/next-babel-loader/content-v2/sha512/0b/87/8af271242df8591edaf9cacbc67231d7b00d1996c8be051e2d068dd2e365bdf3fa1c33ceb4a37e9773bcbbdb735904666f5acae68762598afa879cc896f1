{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n// * 초기상태\nconst initialState = {\n  //\n  largeBuildingType: null,\n  // * 건물 유형 큰 범주\n  buildingType: null,\n  // * 건물 유형\n  roomType: null,\n  // * 숙소 유형\n  isSetUpForGuest: null,\n  // * 게스트만을 위해 만들어진 숙소인가?\n  //\n  maximumGuestCount: 1,\n  // * 최대 숙박 인원\n  bedroomCount: 0,\n  // * 침실 개수\n  bedCount: 1,\n  // * 침대 개수\n  bedList: [],\n  // * 침대 유형\n  publicBedList: [],\n  // * 공용공간 침대 유형\n  //\n  bathroomCount: 1,\n  // * 욕실 개수\n  bathroomType: null,\n  // * 욕실 유형\n  //\n  country: \"\",\n  // * 국가/지역\n  city: \"\",\n  // * 시/도\n  district: \"\",\n  // * 시/군/구\n  streetAddress: \"\",\n  // * 도로명주소\n  detailAddress: \"\",\n  // * 동호수\n  postcode: \"\",\n  // * 우편번호\n  latitude: 0,\n  // * 위도\n  longitude: 0 // * 경도\n\n};\nconst registerRoom = createSlice({\n  name: \"registerRoom\",\n  initialState,\n  reducers: {\n    // 큰 건물 유형 변경하기\n    setLargeBuildingType(state, action) {\n      if (action.payload === \"\") {\n        state.largeBuildingType = null;\n      }\n\n      state.largeBuildingType = action.payload;\n      return state;\n    },\n\n    // * 건물 유형 변경하기.\n    setBuildingType(state, action) {\n      if (action.payload === \"\") {\n        state.buildingType = null;\n      }\n\n      state.buildingType = action.payload;\n      return state;\n    },\n\n    // * 숙소 유형 변경하기.\n    setRoomType(state, action) {\n      state.roomType = action.payload;\n      return state;\n    },\n\n    // * '게스트용 숙소인지' 변경하기\n    setIsSetUpForGuest(state, action) {\n      state.isSetUpForGuest = action.payload;\n      return state;\n    },\n\n    // * 최대 숙박 인원 변경하기\n    setMaximumGuestCount(state, action) {\n      state.maximumGuestCount = action.payload;\n      return state;\n    },\n\n    // * 침실 개수 변경하기\n    setBedroomCount(state, action) {\n      const bedroomCount = action.payload;\n      let {\n        bedList\n      } = state;\n      state.bedroomCount = bedroomCount;\n\n      if (bedroomCount < bedList.length) {\n        //* 기존 침대 개수가 더 많으면 초과부분 잘라내기\n        bedList = state.bedList.slice(0, bedroomCount);\n      } else {\n        //* 변경될 침대 개수가 더 많으면 나머지 침실 채우기\n        for (let i = bedList.length + 1; i < bedroomCount + 1; i += 1) {\n          bedList.push({\n            id: i,\n            beds: []\n          });\n        }\n      }\n\n      state.bedList = bedList;\n      return state;\n    },\n\n    // * 최대 침대 개수 변경하기\n    setBedCount(state, action) {\n      state.bedCount = action.payload;\n      return state;\n    },\n\n    // * 침대 유형 개수 변경하기\n    setBedTypeCount(state, action) {\n      const {\n        bedroomId,\n        type,\n        count\n      } = action.payload;\n      const bedroom = state.bedList[bedroomId - 1];\n      const prevBeds = bedroom.beds;\n      const index = prevBeds.findIndex(bed => bed.type === type);\n\n      if (index === -1) {\n        // * 타입이 없다면...\n        state.bedList[bedroomId - 1].beds = [...prevBeds, {\n          type,\n          count\n        }];\n        return state;\n      } // * 타입이 존재 한다면...\n\n\n      if (count === 0) {\n        state.bedList[bedroomId - 1].beds.splice(index, 1);\n      } else {\n        state.bedList[bedroomId - 1].beds[index].count = count;\n      }\n\n      return state;\n    },\n\n    // * 공용공간 침대 유형 개수 변경하기.\n    setPublicBedTypeCount(state, action) {\n      const {\n        type,\n        count\n      } = action.payload;\n      const index = state.publicBedList.findIndex(bed => bed.type === type);\n\n      if (index === -1) {\n        // * 타입이 없다면...\n        state.publicBedList = [...state.publicBedList, {\n          type,\n          count\n        }];\n        return state;\n      } // * 타입이 존재 한다면...\n\n\n      if (count === 0) {\n        state.publicBedList.splice(index, 1);\n      } else {\n        state.publicBedList[index].count = count;\n      }\n\n      return state;\n    },\n\n    // * 욕실 개수 변경하기.\n    setBathroomCount(state, action) {\n      state.bathroomCount = action.payload;\n    },\n\n    // * 욕실 유형 변경하기.\n    setBathroomType(state, action) {\n      state.bathroomType = action.payload;\n    }\n\n  }\n});\nexport const registerRoomActions = _objectSpread({}, registerRoom.actions);\nexport default registerRoom;","map":{"version":3,"sources":["D:/SUNGHO/DEV/Next Class/next-airbnb/store/registerRoom.ts"],"names":["createSlice","initialState","largeBuildingType","buildingType","roomType","isSetUpForGuest","maximumGuestCount","bedroomCount","bedCount","bedList","publicBedList","bathroomCount","bathroomType","country","city","district","streetAddress","detailAddress","postcode","latitude","longitude","registerRoom","name","reducers","setLargeBuildingType","state","action","payload","setBuildingType","setRoomType","setIsSetUpForGuest","setMaximumGuestCount","setBedroomCount","length","slice","i","push","id","beds","setBedCount","setBedTypeCount","bedroomId","type","count","bedroom","prevBeds","index","findIndex","bed","splice","setPublicBedTypeCount","setBathroomCount","setBathroomType","registerRoomActions","actions"],"mappings":"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","sourcesContent":["import {createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { secondaryUnitBuildingTypeList } from \"../lib/staticData\";\r\nimport {BedType} from \"../types/room\";\r\n\r\ntype RegisterRoomState = {\r\n    // * 숙소등록하기 1단계 (건물, 숙소) 리덕스 설정\r\n    largeBuildingType: string | null;\r\n    buildingType: string | null;\r\n    roomType: string | null;\r\n    isSetUpForGuest: boolean | null;\r\n    \r\n    // * 숙소등록하기 2단계 (인원, 침대, 공용공간) 리덕스 설정\r\n    maximumGuestCount:number;\r\n    bedroomCount:number;\r\n    bedCount:number;\r\n    bedList:{id:number; beds:{type:BedType; count:number}[]}[];\r\n    publicBedList:{type:BedType; count:number}[];\r\n    \r\n    // * 숙소등록하기 3단계 (욕실) 리덕스 설정\r\n    bathroomCount:number;\r\n    bathroomType: \"private\" | \"public\" | null;\r\n\r\n    // * 숙소등록하기 4단계 (위치) 리덕스 설정\r\n    country:string;\r\n    city:string;\r\n    district:string;\r\n    streetAddress:string;\r\n    detailAddress:string;\r\n    postcode:string;\r\n    latitude:number;\r\n    longitude:number;\r\n};\r\n\r\n// * 초기상태\r\nconst initialState: RegisterRoomState = {\r\n    //\r\n    largeBuildingType: null,        // * 건물 유형 큰 범주\r\n    buildingType:null,              // * 건물 유형\r\n    roomType: null,                 // * 숙소 유형\r\n    isSetUpForGuest:null,           // * 게스트만을 위해 만들어진 숙소인가?\r\n    //\r\n    maximumGuestCount:1,            // * 최대 숙박 인원\r\n    bedroomCount:0,                 // * 침실 개수\r\n    bedCount:1,                     // * 침대 개수\r\n    bedList:[],                     // * 침대 유형\r\n    publicBedList:[],               // * 공용공간 침대 유형\r\n    //\r\n    bathroomCount: 1,               // * 욕실 개수\r\n    bathroomType: null,             // * 욕실 유형\r\n    //\r\n    country:\"\",                     // * 국가/지역\r\n    city:\"\",                        // * 시/도\r\n    district:\"\",                    // * 시/군/구\r\n    streetAddress:\"\",               // * 도로명주소\r\n    detailAddress:\"\",               // * 동호수\r\n    postcode:\"\",                    // * 우편번호\r\n    latitude:0,                     // * 위도\r\n    longitude:0,                    // * 경도\r\n};\r\n\r\nconst registerRoom = createSlice({\r\n    name:\"registerRoom\",\r\n    initialState,\r\n    reducers:{\r\n        // 큰 건물 유형 변경하기\r\n        setLargeBuildingType(state, action: PayloadAction<string>) {\r\n          if(action.payload === \"\") {\r\n            state.largeBuildingType = null;\r\n          }\r\n          state.largeBuildingType = action.payload;\r\n          return state;\r\n        },\r\n        // * 건물 유형 변경하기.\r\n        setBuildingType(state, action:PayloadAction<string>){\r\n            if(action.payload===\"\"){\r\n                state.buildingType=null;\r\n            }\r\n            state.buildingType = action.payload;\r\n            return state;\r\n        },\r\n        // * 숙소 유형 변경하기.\r\n        setRoomType(state, action: PayloadAction<\"entire\" | \"private\" | \"public\">) {\r\n            state.roomType = action.payload;\r\n            return state;\r\n        },\r\n        // * '게스트용 숙소인지' 변경하기\r\n        setIsSetUpForGuest(state, action:PayloadAction<boolean>){\r\n            state.isSetUpForGuest = action.payload;\r\n            return state;\r\n        },\r\n        // * 최대 숙박 인원 변경하기\r\n        setMaximumGuestCount(state, action:PayloadAction<number>){\r\n            state.maximumGuestCount = action.payload;\r\n            return state;\r\n        },\r\n        // * 침실 개수 변경하기\r\n        setBedroomCount(state, action: PayloadAction<number>) {\r\n            const bedroomCount = action.payload;\r\n            let { bedList } = state;\r\n\r\n            state.bedroomCount = bedroomCount;\r\n\r\n            if (bedroomCount < bedList.length) {\r\n                //* 기존 침대 개수가 더 많으면 초과부분 잘라내기\r\n                bedList = state.bedList.slice(0, bedroomCount);\r\n            } else {\r\n                //* 변경될 침대 개수가 더 많으면 나머지 침실 채우기\r\n                for (let i = bedList.length + 1; i < bedroomCount + 1; i += 1) {\r\n                bedList.push({ id: i, beds: [] });\r\n                }\r\n            }\r\n\r\n            state.bedList = bedList;\r\n            return state;\r\n        },\r\n        // * 최대 침대 개수 변경하기\r\n        setBedCount(state, action:PayloadAction<number>){\r\n            state.bedCount = action.payload;\r\n            return state;\r\n        },\r\n        // * 침대 유형 개수 변경하기\r\n        setBedTypeCount(state, action:PayloadAction<{bedroomId:number; type:BedType; count:number}>){\r\n            const {bedroomId, type, count} = action.payload;\r\n            const bedroom = state.bedList[bedroomId - 1];\r\n            const prevBeds = bedroom.beds;\r\n            const index = prevBeds.findIndex((bed) => bed.type === type);\r\n\r\n            if(index === -1){\r\n                // * 타입이 없다면...\r\n                state.bedList[bedroomId - 1].beds = [...prevBeds, {type, count}];\r\n                return state;\r\n            }\r\n\r\n            // * 타입이 존재 한다면...\r\n            if(count === 0){\r\n                state.bedList[bedroomId - 1].beds.splice(index, 1);\r\n            }else{\r\n                state.bedList[bedroomId - 1].beds[index].count = count;\r\n            }\r\n            return state;\r\n        },\r\n        // * 공용공간 침대 유형 개수 변경하기.\r\n        setPublicBedTypeCount(state, action:PayloadAction<{type:BedType; count:number}>){\r\n            const {type, count} = action.payload;\r\n\r\n            const index=state.publicBedList.findIndex((bed)=>bed.type===type);\r\n            if(index === -1){\r\n                // * 타입이 없다면...\r\n                state.publicBedList = [...state.publicBedList, {type, count}];\r\n                return state;\r\n            }\r\n\r\n            // * 타입이 존재 한다면...\r\n            if(count === 0){\r\n                state.publicBedList.splice(index, 1);\r\n            }else{\r\n                state.publicBedList[index].count = count;\r\n            }\r\n            return state;\r\n        },\r\n        // * 욕실 개수 변경하기.\r\n        setBathroomCount(state, action:PayloadAction<number>){\r\n            state.bathroomCount = action.payload;\r\n        },\r\n        // * 욕실 유형 변경하기.\r\n        setBathroomType(state, action:PayloadAction<\"private\" | \"public\">){\r\n            state.bathroomType = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\n\r\n\r\n\r\nexport const registerRoomActions={...registerRoom.actions};\r\n\r\nexport default registerRoom;"]},"metadata":{},"sourceType":"module"}