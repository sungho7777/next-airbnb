{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\SUNGHO\\\\DEV\\\\Next Class\\\\next-airbnb\\\\components\\\\register\\\\RegisterRoomBuilding.tsx\";\nimport React, { useMemo } from \"react\";\nimport styled from \"styled-components\";\nimport { useDispatch } from \"react-redux\";\nimport palette from \"../../styles/palette\";\nimport { useSelector } from \"../../store\";\nimport { registerRoomActions } from \"../../store/registerRoom\";\nimport { largeBuildingTypeList } from \"../../lib/staticData\";\nimport Selector from \"../common/Selector\";\nimport RadioGroup from \"../common/RadioGroup\";\nimport RegisterRoomFooter from \"./RegisterRoomFooter\";\nconst Container = styled.div.withConfig({\n  displayName: \"RegisterRoomBuilding__Container\",\n  componentId: \"wjs8af-0\"\n})([\"padding:62px 30px 100px;h2{font-size:19px;font-weight:800;margin-bottom:56px;}h3{font-weight:bold;color:\", \";margin-bottom:6px;}.register-room-building-selector-wrapper{width:320px;margin-bottom:32px;}.register-room-room-type-radio{max-width:485px;margin-bottom:50px;}.register-room-is-setup-for-guest-radio{margin-bottom:50px;}\"], palette.gray_76); // * 선택 불가능한 큼 범위 건물 유형\n\nconst disabledlargeBuildingTypeOptions = [\"하나를 선택해주세요.\"]; // * 숙소 유형 radio options\n\nconst roomTypeRadioOptions = [{\n  label: \"집 전체\",\n  value: \"entire\",\n  description: \"게스트가 숙소 전체를 다른 사람과 공유하지 않고 단독으로 이용합니다. 일반적으로 침실, 욕실, 부엌이 포함됩니다.\"\n}, {\n  label: \"개인실\",\n  value: \"private\",\n  description: \"게스트에게 개인 침실이 제공됩니다. 침실 이외의 공간은 공용일 수 있습니다.\"\n}, {\n  label: \"다인실\",\n  value: \"public\",\n  description: \"게스트는 개인공간 없이, 다른 사람과 함께 쓰는 침실이나 공용공간에서 숙박합니다.\"\n}]; // * 게스트만 사용하도록 만들어진 숙소인지 라디오 options\n\nconst isSetUpForGuestOptions = [{\n  label: \"예, 게스트용으로 따로 마련된 숙소입니다.\",\n  value: true\n}, {\n  label: \"아니요, 제 개인 물건이 숙소에 있습니다.\",\n  value: false\n}];\n\nconst RegisterRoomBuilding = () => {\n  const largeBuildingType = useSelector(state => state.registerRoom.largeBuildingType);\n  const buildingType = useSelector(state => state.registerRoom.buildingType);\n  const roomType = useSelector(state => state.registerRoom.roomType);\n  const isSetUpForGuest = useSelector(state => state.registerRoom.isSetUpForGuest);\n  const dispatch = useDispatch(); // * 큰 범위 건물 유형 변경 시\n\n  const onChangeLargeBuildingType = event => {\n    dispatch(registerRoomActions.setLargeBuildingType(event.target.value));\n  }; // * 상세 건물 유형 변경시\n\n\n  const onChangeBuildingType = event => {\n    dispatch(registerRoomActions.setBuildingType(event.target.value));\n  }; // * 숙소 유형 변경시\n\n\n  const onChangeRoomType = event => {\n    const selected = event.target.value;\n    dispatch(registerRoomActions.setRoomType(selected));\n  }; // * 게스트용 숙소인지 변경 시\n\n\n  const onChangeIsSetUpForGuest = value => {\n    dispatch(registerRoomActions.setIsSetUpForGuest(value));\n  }; // * 선택된 건물 유형 options\n\n\n  const detailBuildingOptions = useMemo(() => {\n    switch (largeBuildingType) {\n      case \"아파트\":\n        {\n          const {\n            apartmentBuildingTypeList\n          } = require(\"../../lib/staticData\");\n\n          dispatch(registerRoomActions.setBuildingType(apartmentBuildingTypeList[0]));\n          return apartmentBuildingTypeList;\n        }\n\n      case \"주택\":\n        {\n          const {\n            houstBuildingTypeList\n          } = require(\"../../lib/staticData\");\n\n          dispatch(registerRoomActions.setBuildingType(houstBuildingTypeList[0]));\n          return houstBuildingTypeList;\n        }\n\n      case \"별채\":\n        {\n          const {\n            secondaryUnitBuildingTypeList\n          } = require(\"../../lib/staticData\");\n\n          dispatch(registerRoomActions.setBuildingType(secondaryUnitBuildingTypeList[0]));\n          return secondaryUnitBuildingTypeList;\n        }\n\n      case \"독특한 숙소\":\n        {\n          const {\n            uniqueSpaceBuildingTypeList\n          } = require(\"../../lib/staticData\");\n\n          dispatch(registerRoomActions.setBuildingType(uniqueSpaceBuildingTypeList[0]));\n          return uniqueSpaceBuildingTypeList;\n        }\n\n      case \"B&B\":\n        {\n          const {\n            bnbBuildingTypeList\n          } = require(\"../../lib/staticData\");\n\n          dispatch(registerRoomActions.setBuildingType(bnbBuildingTypeList[0]));\n          return bnbBuildingTypeList;\n        }\n\n      case \"부티크호텔\":\n        {\n          const {\n            boutiquesHotelBuildingTypeList\n          } = require(\"../../lib/staticData\");\n\n          dispatch(registerRoomActions.setBuildingType(boutiquesHotelBuildingTypeList[0]));\n          return boutiquesHotelBuildingTypeList;\n        }\n\n      default:\n        return [];\n    }\n  }, [largeBuildingType]); // * 모든 값이 있는지 확인하기\n\n  const isValid = useMemo(() => {\n    if (!largeBuildingType || !buildingType || !roomType || !isSetUpForGuest === null) {\n      return false;\n    }\n\n    return true;\n  }, [largeBuildingType, buildingType, roomType, isSetUpForGuest]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uB4F1\\uB85D\\uD560 \\uC219\\uC18C \\uC885\\uB958\\uB294 \\uBB34\\uC5C7\\uC778\\uAC00\\uC694?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"1\\uB2E8\\uACC4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register-room-building-selector-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Selector, {\n        type: \"register\",\n        value: largeBuildingType || undefined,\n        disabled: !disabledlargeBuildingTypeOptions,\n        defaultValue: disabledlargeBuildingTypeOptions //disabledOptions={disabledlargeBuildingTypeOptions}\n        ,\n        isValid: !!largeBuildingTypeList,\n        label: \"\\uC6B0\\uC120 \\uBC94\\uC704\\uB97C \\uC881\\uD600\\uBCFC\\uAE4C\\uC694?\",\n        options: detailBuildingOptions,\n        onChange: onChangeBuildingType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register-room-building-selector-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Selector, {\n        type: \"register\",\n        value: buildingType || \"\",\n        disabled: !largeBuildingType //onChange={(e) => setBuildingTypeDispatch(e.target.value)}\n        ,\n        isValid: !!buildingType,\n        label: \"\\uAC74\\uBB3C \\uC720\\uD615\\uC744 \\uC120\\uD0DD\\uD558\\uC138\\uC694.\",\n        options: detailBuildingOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this), buildingType && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"register-room-room-type-radio\",\n        children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n          isValid: !!roomType,\n          label: \"\\uAC8C\\uC2A4\\uD2B8\\uAC00 \\uBB35\\uAC8C \\uB420 \\uC219\\uC18C \\uC720\\uD615\\uC744 \\uACE8\\uB77C\\uC8FC\\uC138\\uC694.\",\n          value: roomType,\n          options: roomTypeRadioOptions,\n          onChange: onChangeRoomType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"register-room-is-setup-for-guest-radio\",\n        children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n          isValid: isSetUpForGuest !== null,\n          label: \"\\uAC8C\\uC2A4\\uD2B8\\uB9CC \\uC0AC\\uC6A9\\uD558\\uB3C4\\uB85D \\uB9CC\\uB4E4\\uC5B4\\uC9C4 \\uC219\\uC18C\\uC778\\uAC00\\uC694?\",\n          value: isSetUpForGuest,\n          onChange: onChangeIsSetUpForGuest,\n          options: isSetUpForGuestOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(RegisterRoomFooter, {\n      isValid: false,\n      prevHref: \"/\",\n      nextHref: \"/room/register/bedrooms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 9\n  }, this);\n};\n\nexport default RegisterRoomBuilding;","map":{"version":3,"sources":["D:/SUNGHO/DEV/Next Class/next-airbnb/components/register/RegisterRoomBuilding.tsx"],"names":["React","useMemo","styled","useDispatch","palette","useSelector","registerRoomActions","largeBuildingTypeList","Selector","RadioGroup","RegisterRoomFooter","Container","div","gray_76","disabledlargeBuildingTypeOptions","roomTypeRadioOptions","label","value","description","isSetUpForGuestOptions","RegisterRoomBuilding","largeBuildingType","state","registerRoom","buildingType","roomType","isSetUpForGuest","dispatch","onChangeLargeBuildingType","event","setLargeBuildingType","target","onChangeBuildingType","setBuildingType","onChangeRoomType","selected","setRoomType","onChangeIsSetUpForGuest","setIsSetUpForGuest","detailBuildingOptions","apartmentBuildingTypeList","require","houstBuildingTypeList","secondaryUnitBuildingTypeList","uniqueSpaceBuildingTypeList","bnbBuildingTypeList","boutiquesHotelBuildingTypeList","isValid","undefined"],"mappings":"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","sourcesContent":["import React, { useMemo } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport palette from \"../../styles/palette\"\r\nimport { useSelector } from \"../../store\";\r\nimport { registerRoomActions } from \"../../store/registerRoom\";\r\nimport {largeBuildingTypeList} from \"../../lib/staticData\";\r\nimport Selector from \"../common/Selector\";\r\nimport RadioGroup from \"../common/RadioGroup\";\r\nimport RegisterRoomFooter from \"./RegisterRoomFooter\";\r\n\r\nconst Container = styled.div`\r\n    padding: 62px 30px 100px;\r\n    h2 {\r\n        font-size: 19px;\r\n        font-weight: 800;\r\n        margin-bottom: 56px;\r\n    }\r\n    h3 {\r\n        font-weight: bold;\r\n        color: ${palette.gray_76};\r\n        margin-bottom: 6px;\r\n    }\r\n    .register-room-building-selector-wrapper {\r\n        width: 320px;\r\n        margin-bottom: 32px;\r\n    }\r\n    .register-room-room-type-radio {\r\n        max-width: 485px;\r\n        margin-bottom: 50px;\r\n    }\r\n    .register-room-is-setup-for-guest-radio {\r\n        margin-bottom: 50px;\r\n    }\r\n`;\r\n\r\n// * 선택 불가능한 큼 범위 건물 유형\r\nconst disabledlargeBuildingTypeOptions = [\"하나를 선택해주세요.\"];\r\n\r\n// * 숙소 유형 radio options\r\nconst roomTypeRadioOptions = [\r\n    {\r\n        label:\"집 전체\",\r\n        value:\"entire\",\r\n        description:\"게스트가 숙소 전체를 다른 사람과 공유하지 않고 단독으로 이용합니다. 일반적으로 침실, 욕실, 부엌이 포함됩니다.\",\r\n    },\r\n    {\r\n        label:\"개인실\",\r\n        value:\"private\",\r\n        description:\"게스트에게 개인 침실이 제공됩니다. 침실 이외의 공간은 공용일 수 있습니다.\",\r\n    },\r\n    {\r\n        label:\"다인실\",\r\n        value:\"public\",\r\n        description:\"게스트는 개인공간 없이, 다른 사람과 함께 쓰는 침실이나 공용공간에서 숙박합니다.\",\r\n    },\r\n];\r\n// * 게스트만 사용하도록 만들어진 숙소인지 라디오 options\r\nconst isSetUpForGuestOptions = [\r\n    {\r\n        label:\"예, 게스트용으로 따로 마련된 숙소입니다.\",\r\n        value:true,\r\n    },\r\n    {\r\n        label:\"아니요, 제 개인 물건이 숙소에 있습니다.\",\r\n        value:false,\r\n    },\r\n];\r\n\r\nconst RegisterRoomBuilding:React.FC=()=>{\r\n    const largeBuildingType = useSelector((state) => state.registerRoom.largeBuildingType);\r\n    const buildingType = useSelector((state) => state.registerRoom.buildingType);\r\n    const roomType = useSelector((state) => state.registerRoom.roomType);\r\n    const isSetUpForGuest = useSelector((state) => state.registerRoom.isSetUpForGuest);\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    // * 큰 범위 건물 유형 변경 시\r\n    const onChangeLargeBuildingType = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        dispatch(registerRoomActions.setLargeBuildingType(event.target.value));\r\n    };\r\n    \r\n    // * 상세 건물 유형 변경시\r\n    const onChangeBuildingType=(event:React.ChangeEvent<HTMLSelectElement>)=>{\r\n        dispatch(registerRoomActions.setBuildingType(event.target.value));\r\n    };\r\n\r\n    // * 숙소 유형 변경시\r\n    const onChangeRoomType = (event:React.ChangeEvent<HTMLInputElement>)=>{\r\n        const selected=event.target.value;\r\n        dispatch(\r\n            registerRoomActions.setRoomType(\r\n                selected as \"entire\" | \"private\" | \"public\"\r\n            )\r\n        );\r\n    };\r\n\r\n    // * 게스트용 숙소인지 변경 시\r\n    const onChangeIsSetUpForGuest=(value:any)=>{\r\n        dispatch(registerRoomActions.setIsSetUpForGuest(value));\r\n    };\r\n\r\n\r\n    // * 선택된 건물 유형 options\r\n    const detailBuildingOptions=useMemo(()=>{\r\n        switch (largeBuildingType) {\r\n            case \"아파트\": {\r\n                const { \r\n                    apartmentBuildingTypeList,\r\n                } = require(\"../../lib/staticData\");\r\n                dispatch(\r\n                    registerRoomActions.setBuildingType(apartmentBuildingTypeList[0])\r\n                );\r\n                return apartmentBuildingTypeList;\r\n            }\r\n            case \"주택\": {\r\n                const {\r\n                    houstBuildingTypeList\r\n                } = require(\"../../lib/staticData\");\r\n                dispatch(\r\n                    registerRoomActions.setBuildingType(houstBuildingTypeList[0])\r\n                );\r\n                return houstBuildingTypeList;\r\n            }\r\n            case \"별채\": {\r\n                const {\r\n                    secondaryUnitBuildingTypeList,\r\n                } = require(\"../../lib/staticData\");\r\n                dispatch(\r\n                    registerRoomActions.setBuildingType(secondaryUnitBuildingTypeList[0])\r\n                );\r\n                return secondaryUnitBuildingTypeList;\r\n            }\r\n            case \"독특한 숙소\": {\r\n                const {\r\n                    uniqueSpaceBuildingTypeList\r\n                } = require(\"../../lib/staticData\");\r\n                dispatch(\r\n                    registerRoomActions.setBuildingType(uniqueSpaceBuildingTypeList[0])\r\n                );\r\n                return uniqueSpaceBuildingTypeList;\r\n            }\r\n            case \"B&B\": {\r\n                const {\r\n                    bnbBuildingTypeList\r\n                } = require(\"../../lib/staticData\");\r\n                dispatch(\r\n                    registerRoomActions.setBuildingType(bnbBuildingTypeList[0])\r\n                );\r\n                return bnbBuildingTypeList;\r\n            }\r\n            case \"부티크호텔\": {\r\n                const {\r\n                    boutiquesHotelBuildingTypeList,\r\n                } = require(\"../../lib/staticData\");\r\n                dispatch(\r\n                    registerRoomActions.setBuildingType(boutiquesHotelBuildingTypeList[0])\r\n                );\r\n                return boutiquesHotelBuildingTypeList;\r\n            }\r\n            default:\r\n                return [];\r\n        }\r\n    }, [largeBuildingType]);\r\n\r\n    // * 모든 값이 있는지 확인하기\r\n    const isValid=useMemo(() => {\r\n        if(!largeBuildingType || !buildingType || !roomType || !isSetUpForGuest === null){\r\n            return false;\r\n\r\n        }\r\n        return true;\r\n\r\n    },[largeBuildingType, buildingType, roomType, isSetUpForGuest]);\r\n\r\n    return (\r\n        <Container>\r\n            <h2>등록할 숙소 종류는 무엇인가요?</h2>\r\n            <h3>1단계</h3>\r\n            <div className=\"register-room-building-selector-wrapper\">\r\n                <Selector\r\n                    type=\"register\"\r\n                    value={largeBuildingType || undefined}\r\n                    disabled={!disabledlargeBuildingTypeOptions}\r\n                    defaultValue={disabledlargeBuildingTypeOptions}\r\n                    //disabledOptions={disabledlargeBuildingTypeOptions}\r\n                    isValid={!!largeBuildingTypeList}\r\n                    label=\"우선 범위를 좁혀볼까요?\"\r\n                    options={detailBuildingOptions}\r\n\r\n                    onChange={onChangeBuildingType}\r\n                />\r\n            </div>\r\n            <div className=\"register-room-building-selector-wrapper\">\r\n                <Selector\r\n                type=\"register\"\r\n                value={buildingType || \"\"}\r\n                disabled={!largeBuildingType}\r\n                //onChange={(e) => setBuildingTypeDispatch(e.target.value)}\r\n                isValid={!!buildingType}\r\n                label=\"건물 유형을 선택하세요.\"\r\n                options={detailBuildingOptions}\r\n                />\r\n            </div>\r\n            {buildingType && (\r\n                <>\r\n                    <div className=\"register-room-room-type-radio\">\r\n                        <RadioGroup\r\n                            isValid={!!roomType}\r\n                            label=\"게스트가 묵게 될 숙소 유형을 골라주세요.\"\r\n                            value={roomType}\r\n                            options={roomTypeRadioOptions}\r\n                            onChange={onChangeRoomType}\r\n                        />\r\n                    </div>\r\n                    <div className=\"register-room-is-setup-for-guest-radio\">\r\n                        <RadioGroup\r\n                            isValid={isSetUpForGuest!==null}\r\n                            label=\"게스트만 사용하도록 만들어진 숙소인가요?\"\r\n                            value={isSetUpForGuest}\r\n                            onChange={onChangeIsSetUpForGuest}\r\n                            options={isSetUpForGuestOptions}\r\n                        />\r\n                    </div>\r\n                </>\r\n            )}\r\n            <RegisterRoomFooter\r\n                isValid={false}\r\n                prevHref=\"/\"\r\n                nextHref=\"/room/register/bedrooms\"\r\n            />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default RegisterRoomBuilding;"]},"metadata":{},"sourceType":"module"}