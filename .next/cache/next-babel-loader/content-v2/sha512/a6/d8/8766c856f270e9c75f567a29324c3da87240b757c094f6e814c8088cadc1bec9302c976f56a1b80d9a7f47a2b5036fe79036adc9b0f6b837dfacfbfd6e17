{"ast":null,"code":"import _defineProperty from \"D:/SUNGHO/DEV/Next Class/next-airbnb/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n// * 초기상태\nvar initialState = {\n  largeBuildingType: null,\n  // * 건물 유형 큰 범주\n  buildingType: null,\n  // * 건물 유형\n  roomType: null,\n  // * 숙소 유형\n  isSetUpForGuest: null,\n  // * 게스트만을 위해 만들어진 숙소인가?\n  //\n  maximumGuestCount: 1,\n  // * 최대 숙박 인원\n  bedroomCount: 0,\n  // * 침실 개수\n  bedCount: 1,\n  // * 침대 개수\n  bedList: [],\n  // * 침대 유형\n  publicBedList: [] // * 공용공간 침대 유형\n\n};\nvar registerRoom = createSlice({\n  name: \"registerRoom\",\n  initialState: initialState,\n  reducers: {\n    // 큰 건물 유형 변경하기\n    setLargeBuildingType: function setLargeBuildingType(state, action) {\n      if (action.payload === \"\") {\n        state.largeBuildingType = null;\n      }\n\n      state.largeBuildingType = action.payload;\n      return state;\n    },\n    // * 건물 유형 변경하기.\n    setBuildingType: function setBuildingType(state, action) {\n      if (action.payload === \"\") {\n        state.buildingType = null;\n      }\n\n      state.buildingType = action.payload;\n      return state;\n    },\n    // * 숙소 유형 변경하기.\n    setRoomType: function setRoomType(state, action) {\n      state.roomType = action.payload;\n      return state;\n    },\n    // * '게스트용 숙소인지' 변경하기\n    setIsSetUpForGuest: function setIsSetUpForGuest(state, action) {\n      state.isSetUpForGuest = action.payload;\n      return state;\n    },\n    // * 최대 숙박 인원 변경하기\n    setMaximumGuestCount: function setMaximumGuestCount(state, action) {\n      state.maximumGuestCount = action.payload;\n      return state;\n    },\n    // * 침실 개수 변경하기\n    setBedroomCount: function setBedroomCount(state, action) {\n      var bedroomCount = action.payload;\n      var bedList = state.bedList;\n      state.bedroomCount = bedroomCount;\n\n      if (bedroomCount < bedList.length) {\n        //* 기존 침대 개수가 더 많으면 초과부분 잘라내기\n        bedList = state.bedList.slice(0, bedroomCount);\n      } else {\n        //* 변경될 침대 개수가 더 많으면 나머지 침실 채우기\n        for (var i = bedList.length + 1; i < bedroomCount + 1; i += 1) {\n          bedList.push({\n            id: i,\n            beds: []\n          });\n        }\n      }\n\n      state.bedList = bedList;\n      return state;\n    },\n    // * 최대 침대 개수 변경하기\n    setBedCount: function setBedCount(state, action) {\n      state.bedCount = action.payload;\n      return state;\n    }\n  }\n});\nexport var registerRoomActions = _objectSpread({}, registerRoom.actions);\nexport default registerRoom;","map":{"version":3,"sources":["D:/SUNGHO/DEV/Next Class/next-airbnb/store/registerRoom.ts"],"names":["createSlice","initialState","largeBuildingType","buildingType","roomType","isSetUpForGuest","maximumGuestCount","bedroomCount","bedCount","bedList","publicBedList","registerRoom","name","reducers","setLargeBuildingType","state","action","payload","setBuildingType","setRoomType","setIsSetUpForGuest","setMaximumGuestCount","setBedroomCount","length","slice","i","push","id","beds","setBedCount","registerRoomActions","actions"],"mappings":"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","sourcesContent":["import {createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { secondaryUnitBuildingTypeList } from \"../lib/staticData\";\r\nimport {BedType} from \"../types/room\";\r\n\r\ntype RegisterRoomState = {\r\n    largeBuildingType: string | null;\r\n    buildingType: string | null;\r\n    roomType: string | null;\r\n    isSetUpForGuest: boolean | null;\r\n\r\n    maximumGuestCount:number;\r\n    bedroomCount:number;\r\n    bedCount:number;\r\n    bedList:{id:number; beds:{type:BedType; count:number}[]}[];\r\n    publicBedList:{type:BedType; count:number}[];\r\n};\r\n\r\n// * 초기상태\r\nconst initialState: RegisterRoomState = {\r\n    largeBuildingType: null,        // * 건물 유형 큰 범주\r\n    buildingType:null,              // * 건물 유형\r\n    roomType: null,                 // * 숙소 유형\r\n    isSetUpForGuest:null,           // * 게스트만을 위해 만들어진 숙소인가?\r\n    //\r\n    maximumGuestCount:1,            // * 최대 숙박 인원\r\n    bedroomCount:0,                 // * 침실 개수\r\n    bedCount:1,                     // * 침대 개수\r\n    bedList:[],                     // * 침대 유형\r\n    publicBedList:[],               // * 공용공간 침대 유형\r\n\r\n};\r\n\r\nconst registerRoom = createSlice({\r\n    name:\"registerRoom\",\r\n    initialState,\r\n    reducers:{\r\n        // 큰 건물 유형 변경하기\r\n        setLargeBuildingType(state, action: PayloadAction<string>) {\r\n          if(action.payload === \"\") {\r\n            state.largeBuildingType = null;\r\n          }\r\n          state.largeBuildingType = action.payload;\r\n          return state;\r\n        },\r\n        // * 건물 유형 변경하기.\r\n        setBuildingType(state, action:PayloadAction<string>){\r\n            if(action.payload===\"\"){\r\n                state.buildingType=null;\r\n            }\r\n            state.buildingType = action.payload;\r\n            return state;\r\n        },\r\n        // * 숙소 유형 변경하기.\r\n        setRoomType(state, action: PayloadAction<\"entire\" | \"private\" | \"public\">) {\r\n            state.roomType = action.payload;\r\n            return state;\r\n        },\r\n        // * '게스트용 숙소인지' 변경하기\r\n        setIsSetUpForGuest(state, action:PayloadAction<boolean>){\r\n            state.isSetUpForGuest = action.payload;\r\n            return state;\r\n        },\r\n        // * 최대 숙박 인원 변경하기\r\n        setMaximumGuestCount(state, action:PayloadAction<number>){\r\n            state.maximumGuestCount = action.payload;\r\n            return state;\r\n        },\r\n        // * 침실 개수 변경하기\r\n        setBedroomCount(state, action: PayloadAction<number>) {\r\n            const bedroomCount = action.payload;\r\n            let { bedList } = state;\r\n\r\n            state.bedroomCount = bedroomCount;\r\n\r\n            if (bedroomCount < bedList.length) {\r\n                //* 기존 침대 개수가 더 많으면 초과부분 잘라내기\r\n                bedList = state.bedList.slice(0, bedroomCount);\r\n            } else {\r\n                //* 변경될 침대 개수가 더 많으면 나머지 침실 채우기\r\n                for (let i = bedList.length + 1; i < bedroomCount + 1; i += 1) {\r\n                bedList.push({ id: i, beds: [] });\r\n                }\r\n            }\r\n\r\n            state.bedList = bedList;\r\n            return state;\r\n        },\r\n        // * 최대 침대 개수 변경하기\r\n        setBedCount(state, action:PayloadAction<number>){\r\n            state.bedCount = action.payload;\r\n            return state;\r\n        },\r\n    },\r\n});\r\n\r\n\r\n\r\n\r\nexport const registerRoomActions={...registerRoom.actions};\r\n\r\nexport default registerRoom;"]},"metadata":{},"sourceType":"module"}