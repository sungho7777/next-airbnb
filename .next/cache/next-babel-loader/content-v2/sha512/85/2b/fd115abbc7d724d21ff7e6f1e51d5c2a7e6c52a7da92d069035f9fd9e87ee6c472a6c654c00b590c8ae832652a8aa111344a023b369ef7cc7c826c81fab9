{"ast":null,"code":"import jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nimport Data from \"../../../lib/data\";\nexport default (async (req, res) => {\n  if (req.method === \"POST\") {\n    try {\n      const {\n        email,\n        password\n      } = req.body;\n\n      if (!email || !password) {\n        res.statusCode = 400;\n        return res.send(\"필수 데이터가 없습니다.\");\n      }\n\n      const user = Data.user.find({\n        email\n      });\n\n      if (!user) {\n        res.statusCode = 404;\n        return res.send(\"해당 이메일의 유저가 없습니다.\");\n      } //* 비밀번호 일치여부\n\n\n      const isPasswordMatched = bcrypt.compareSync(password, user.password);\n\n      if (!isPasswordMatched) {\n        res.statusCode = 403;\n        return res.send(\"비밀번호가 일치하지 않습니다.\");\n      }\n\n      const token = jwt.sign(String(user.id), process.env.JWT_SECRET);\n      res.setHeader(\"Set-Cookie\", `access_token=${token}; path=/; httponly`);\n      /*\r\n          expires=${new Date(\r\n              Date.now() + 60 * 60 * 24 * 1000 * 3 //지금 시간 + 3일\r\n          )};\r\n      */\n\n      const userWithoutPassword = user;\n      delete userWithoutPassword.password;\n      res.statusCode = 200;\n      return res.send(user);\n    } catch (e) {\n      console.log(e);\n      res.statusCode = 500;\n      return res.end(e);\n    }\n  }\n\n  res.statusCode = 405;\n  return res.end();\n});","map":{"version":3,"sources":["D:/SUNGHO/DEV/Next Class/next-airbnb/pages/api/auth/login.ts"],"names":["jwt","bcrypt","Data","req","res","method","email","password","body","statusCode","send","user","find","isPasswordMatched","compareSync","token","sign","String","id","process","env","JWT_SECRET","setHeader","userWithoutPassword","e","console","log","end"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,OAAOC,IAAP,MAAiB,mBAAjB;AAGA,gBAAe,OAAMC,GAAN,EAA2BC,GAA3B,KAAoD;AAC/D,MAAGD,GAAG,CAACE,MAAJ,KAAe,MAAlB,EAAyB;AACrB,QAAI;AACA,YAAM;AAACC,QAAAA,KAAD;AAAQC,QAAAA;AAAR,UAAoBJ,GAAG,CAACK,IAA9B;;AACA,UAAG,CAACF,KAAD,IAAU,CAACC,QAAd,EAAuB;AACnBH,QAAAA,GAAG,CAACK,UAAJ,GAAe,GAAf;AACA,eAAOL,GAAG,CAACM,IAAJ,CAAS,eAAT,CAAP;AACH;;AAED,YAAMC,IAAI,GAAGT,IAAI,CAACS,IAAL,CAAUC,IAAV,CAAe;AAAEN,QAAAA;AAAF,OAAf,CAAb;;AACA,UAAI,CAACK,IAAL,EAAW;AACPP,QAAAA,GAAG,CAACK,UAAJ,GAAiB,GAAjB;AACA,eAAOL,GAAG,CAACM,IAAJ,CAAS,mBAAT,CAAP;AACH,OAXD,CAaA;;;AACA,YAAMG,iBAAiB,GAAGZ,MAAM,CAACa,WAAP,CAAmBP,QAAnB,EAA6BI,IAAI,CAACJ,QAAlC,CAA1B;;AACA,UAAI,CAACM,iBAAL,EAAwB;AACpBT,QAAAA,GAAG,CAACK,UAAJ,GAAiB,GAAjB;AACA,eAAOL,GAAG,CAACM,IAAJ,CAAS,kBAAT,CAAP;AACH;;AACD,YAAMK,KAAK,GAAGf,GAAG,CAACgB,IAAJ,CAASC,MAAM,CAACN,IAAI,CAACO,EAAN,CAAf,EAA0BC,OAAO,CAACC,GAAR,CAAYC,UAAtC,CAAd;AACAjB,MAAAA,GAAG,CAACkB,SAAJ,CACI,YADJ,EACmB,gBAAeP,KAAM,oBADxC;AAGA;AACZ;AACA;AACA;AACA;;AACY,YAAMQ,mBAGJ,GAAGZ,IAHL;AAKA,aAAOY,mBAAmB,CAAChB,QAA3B;AACAH,MAAAA,GAAG,CAACK,UAAJ,GAAiB,GAAjB;AACA,aAAOL,GAAG,CAACM,IAAJ,CAASC,IAAT,CAAP;AAEH,KArCD,CAqCE,OAAOa,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACApB,MAAAA,GAAG,CAACK,UAAJ,GAAe,GAAf;AACA,aAAOL,GAAG,CAACuB,GAAJ,CAAQH,CAAR,CAAP;AACH;AACJ;;AACDpB,EAAAA,GAAG,CAACK,UAAJ,GAAe,GAAf;AAEA,SAAOL,GAAG,CAACuB,GAAJ,EAAP;AACH,CAhDD","sourcesContent":["import jwt from \"jsonwebtoken\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport { NextApiRequest, NextApiResponse } from \"next\";\r\nimport Data from \"../../../lib/data\";\r\nimport { StoredUserType } from \"../../../types/user\";\r\n\r\nexport default async(req: NextApiRequest, res: NextApiResponse) => {\r\n    if(req.method === \"POST\"){\r\n        try {\r\n            const {email, password} = req.body;\r\n            if(!email || !password){\r\n                res.statusCode=400;\r\n                return res.send(\"필수 데이터가 없습니다.\");\r\n            }\r\n\r\n            const user = Data.user.find({ email });\r\n            if (!user) {\r\n                res.statusCode = 404;\r\n                return res.send(\"해당 이메일의 유저가 없습니다.\");\r\n            }\r\n\r\n            //* 비밀번호 일치여부\r\n            const isPasswordMatched = bcrypt.compareSync(password, user.password);\r\n            if (!isPasswordMatched) {\r\n                res.statusCode = 403;\r\n                return res.send(\"비밀번호가 일치하지 않습니다.\");\r\n            }\r\n            const token = jwt.sign(String(user.id), process.env.JWT_SECRET!);\r\n            res.setHeader(\r\n                \"Set-Cookie\", `access_token=${token}; path=/; httponly`\r\n            );\r\n            /*\r\n                expires=${new Date(\r\n                    Date.now() + 60 * 60 * 24 * 1000 * 3 //지금 시간 + 3일\r\n                )};\r\n            */\r\n            const userWithoutPassword: Partial<Pick<\r\n                StoredUserType,\r\n                \"password\"\r\n            >> = user;\r\n\r\n            delete userWithoutPassword.password;\r\n            res.statusCode = 200;\r\n            return res.send(user);\r\n\r\n        } catch (e) {\r\n            console.log(e);\r\n            res.statusCode=500;\r\n            return res.end(e);\r\n        }\r\n    }\r\n    res.statusCode=405;\r\n\r\n    return res.end();\r\n};"]},"metadata":{},"sourceType":"module"}