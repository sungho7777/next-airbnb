{"ast":null,"code":"import bcrypt from \"bcryptjs\";\nimport Data from '../../../lib/data';\nimport jwt from 'jsonwebtoken';\nexport default (async (req, res) => {\n  if (req.method === \"POST\") {\n    try {\n      const {\n        email,\n        password\n      } = req.body;\n\n      if (!email || !password) {\n        res.statusCode = 400;\n        return res.send(\"필수 데이터가 없습니다.\");\n      } // 이메일 유저 확인\n\n\n      const user = Data.user.find({\n        email\n      });\n\n      if (!user) {\n        res.statusCode = 405;\n        return res.send(\"해당 이메일의 유저가 없습니다.\");\n      } // 비밀번호 일치 여부\n\n\n      const isPasswordMatched = bcrypt.compareSync(password, user.password);\n\n      if (!isPasswordMatched) {\n        res.statusCode = 403;\n        return res.send(\"비밀번호가 일치하지 않습니다.\");\n      }\n\n      const token = jwt.sign(String(user.id), process.env.JWT_SECRET);\n      res.setHeader(\"Set-Cookie\", `access_token=${token}; path=/;expires=${new Date(Date.now() + 60 * 60 * 24 * 1000 * 3).toISOString()};\n        httponly`);\n    } catch (error) {\n      console.log(error);\n      res.statusCode = 500;\n      return res.send(error);\n    }\n\n    return res.end();\n  }\n\n  res.statusCode = 405;\n  return res.end();\n});","map":{"version":3,"sources":["D:/SUNGHO/DEV/Next Class/next-airbnb/pages/api/auth/login.ts"],"names":["bcrypt","Data","jwt","req","res","method","email","password","body","statusCode","send","user","find","isPasswordMatched","compareSync","token","sign","String","id","process","env","JWT_SECRET","setHeader","Date","now","toISOString","error","console","log","end"],"mappings":"AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AAClE,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,QAAI;AACF,YAAM;AAACC,QAAAA,KAAD;AAAQC,QAAAA;AAAR,UAAqBJ,GAAG,CAACK,IAA/B;;AACA,UAAI,CAACF,KAAD,IAAU,CAACC,QAAf,EAAyB;AACvBH,QAAAA,GAAG,CAACK,UAAJ,GAAiB,GAAjB;AACA,eAAOL,GAAG,CAACM,IAAJ,CAAS,eAAT,CAAP;AACD,OALC,CAOF;;;AACA,YAAMC,IAAI,GAAGV,IAAI,CAACU,IAAL,CAAUC,IAAV,CAAe;AAACN,QAAAA;AAAD,OAAf,CAAb;;AACA,UAAI,CAACK,IAAL,EAAW;AACTP,QAAAA,GAAG,CAACK,UAAJ,GAAiB,GAAjB;AACA,eAAOL,GAAG,CAACM,IAAJ,CAAS,mBAAT,CAAP;AACD,OAZC,CAcF;;;AACA,YAAMG,iBAAiB,GAAGb,MAAM,CAACc,WAAP,CAAmBP,QAAnB,EAA6BI,IAAI,CAACJ,QAAlC,CAA1B;;AACA,UAAI,CAACM,iBAAL,EAAwB;AACtBT,QAAAA,GAAG,CAACK,UAAJ,GAAiB,GAAjB;AACA,eAAOL,GAAG,CAACM,IAAJ,CAAS,kBAAT,CAAP;AACD;;AAED,YAAMK,KAAK,GAAGb,GAAG,CAACc,IAAJ,CAASC,MAAM,CAACN,IAAI,CAACO,EAAN,CAAf,EAA0BC,OAAO,CAACC,GAAR,CAAYC,UAAtC,CAAd;AACAjB,MAAAA,GAAG,CAACkB,SAAJ,CACE,YADF,EAEG,gBAAeP,KAAM,oBAAmB,IAAIQ,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAa,KAAK,EAAL,GAAU,EAAV,GAAe,IAAf,GAAsB,CAA5C,EAA+CC,WAA/C,EAA6D;AAC9G,iBAHM;AAMD,KA5BD,CA4BE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAtB,MAAAA,GAAG,CAACK,UAAJ,GAAiB,GAAjB;AACA,aAAOL,GAAG,CAACM,IAAJ,CAASgB,KAAT,CAAP;AACD;;AAED,WAAOtB,GAAG,CAACyB,GAAJ,EAAP;AACD;;AACDzB,EAAAA,GAAG,CAACK,UAAJ,GAAiB,GAAjB;AAEA,SAAOL,GAAG,CAACyB,GAAJ,EAAP;AACD,CAzCD","sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\r\nimport bcrypt from \"bcryptjs\"\r\nimport Data from '../../../lib/data';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\r\n  if (req.method === \"POST\") {\r\n    try {\r\n      const {email, password } = req.body;\r\n      if (!email || !password) {\r\n        res.statusCode = 400;\r\n        return res.send(\"필수 데이터가 없습니다.\");\r\n      }\r\n\r\n      // 이메일 유저 확인\r\n      const user = Data.user.find({email});\r\n      if (!user) {\r\n        res.statusCode = 405;\r\n        return res.send(\"해당 이메일의 유저가 없습니다.\")\r\n      }\r\n\r\n      // 비밀번호 일치 여부\r\n      const isPasswordMatched = bcrypt.compareSync(password, user.password);\r\n      if (!isPasswordMatched) {\r\n        res.statusCode = 403;\r\n        return res.send(\"비밀번호가 일치하지 않습니다.\");\r\n      }\r\n\r\n      const token = jwt.sign(String(user.id), process.env.JWT_SECRET!);\r\n      res.setHeader(\r\n        \"Set-Cookie\",\r\n        `access_token=${token}; path=/;expires=${new Date(Date.now() + 60 * 60 * 24 * 1000 * 3).toISOString()};\r\n        httponly`\r\n      )\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n      res.statusCode = 500;\r\n      return res.send(error);\r\n    }\r\n\r\n    return res.end();\r\n  }\r\n  res.statusCode = 405;\r\n\r\n  return res.end();\r\n};"]},"metadata":{},"sourceType":"module"}