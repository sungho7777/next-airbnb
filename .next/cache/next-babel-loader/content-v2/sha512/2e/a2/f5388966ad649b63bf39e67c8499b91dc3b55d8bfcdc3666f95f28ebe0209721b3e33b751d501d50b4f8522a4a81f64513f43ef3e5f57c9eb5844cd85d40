{"ast":null,"code":"import bcrypt from \"bcryptjs\";\nimport Data from '../../../lib/data/index';\nimport jwt from \"jsonwebtoken\";\n// import { SignUpAPIBody } from \"../../../lib/api/auth\"\nexport default (async (req, res) => {\n  if (req.method === \"POST\") {\n    const {\n      email,\n      firstname,\n      lastname,\n      password,\n      birthday\n    } = req.body;\n\n    if (!email || !firstname || !lastname || !password || !birthday) {\n      res.statusCode = 400;\n      return res.send(\"필수 데이터가 없습니다.\");\n    }\n\n    const userExist = Data.user.exist({\n      email\n    });\n    console.log(\"userExist : \" + userExist);\n\n    if (userExist) {\n      res.statusCode = 405;\n      res.send(\"이미 가입된 이메일입니다.\");\n    }\n\n    const users = Data.user.getList();\n    let userId;\n\n    if (users.length === 0) {\n      userId = 1;\n    } else {\n      userId = users[users.length - 1].id + 1;\n    }\n\n    const hashedPassword = bcrypt.hashSync(password, 8);\n    const user = Data.user.find({\n      email\n    });\n    console.log(\"hashedPassword : \" + hashedPassword);\n    const newUser = {\n      id: userId,\n      email,\n      firstname,\n      lastname,\n      password: hashedPassword,\n      birthday,\n      profileImage: \"/static/image/default_user_profile_image.jpg\"\n    };\n    Data.user.write([...users, newUser]);\n    const token = jwt.sign(String(newUser.id), process.env.JWT_SECRET);\n    console.log(\"token : \" + token);\n    res.setHeader(\"Set-Cookie\", `access_token=${token}; path=/; expires=${new Date(Date.now() + 60 * 60 * 24 * 1000 * 3).toISOString()}; httponly`);\n    const newUserWithoutPassword = newUser; // delete을 사용하여 객체의 속성을 제거할 수 있다.\n    // 비밀번호가 일치한다면, 유저 정보에서 password를 제거하여 보내고, 회원가입 떄와 동일하게 token을 전달하도록 한다.\n\n    delete newUserWithoutPassword.password;\n    res.statusCode = 200;\n    return res.send(newUser);\n  }\n\n  res.statusCode = 405;\n  return res.end();\n});","map":{"version":3,"sources":["D:/SUNGHO/DEV/Next Class/next-airbnb/pages/api/auth/signup.ts"],"names":["bcrypt","Data","jwt","req","res","method","email","firstname","lastname","password","birthday","body","statusCode","send","userExist","user","exist","console","log","users","getList","userId","length","id","hashedPassword","hashSync","find","newUser","profileImage","write","token","sign","String","process","env","JWT_SECRET","setHeader","Date","now","toISOString","newUserWithoutPassword","end"],"mappings":"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","sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\"\r\nimport{ StoredUserType } from \"../../../types/user\"\r\nimport bcrypt from \"bcryptjs\"\r\nimport Data from '../../../lib/data/index';\r\nimport jwt from \"jsonwebtoken\";\r\nimport React from 'react';\r\nimport { signupAPI } from '../../../lib/api/auth';\r\n// import { SignUpAPIBody } from \"../../../lib/api/auth\"\r\n\r\nexport default async (req: NextApiRequest, res:NextApiResponse) => {\r\n  if(req.method === \"POST\") {\r\n      const { email, firstname, lastname, password, birthday } = req.body;\r\n\r\n      if (!email || !firstname || !lastname || !password || !birthday) {\r\n        res.statusCode = 400;\r\n        return res.send(\"필수 데이터가 없습니다.\")\r\n      }\r\n\r\n      const userExist = Data.user.exist({email});\r\n      console.log(\"userExist : \" + userExist);\r\n\r\n      if (userExist) {\r\n        res.statusCode = 405;\r\n        res.send(\"이미 가입된 이메일입니다.\");\r\n      }\r\n\r\n      const users = Data.user.getList();\r\n      let userId;\r\n      if (users.length === 0) {\r\n        userId = 1;\r\n      } else {\r\n        userId = users[users.length - 1].id + 1;\r\n      }\r\n\r\n      const hashedPassword = bcrypt.hashSync(password, 8);\r\n      \r\n      const user = Data.user.find({email});\r\n      console.log(\"hashedPassword : \" + hashedPassword);\r\n\r\n      const newUser: StoredUserType = {\r\n        id: userId,\r\n        email,\r\n        firstname,\r\n        lastname,\r\n        password: hashedPassword,\r\n        birthday,\r\n        profileImage: \"/static/image/default_user_profile_image.jpg\",\r\n      };\r\n\r\n      Data.user.write([...users, newUser]);\r\n\r\n      const token = jwt.sign(String(newUser.id), process.env.JWT_SECRET!);\r\n      console.log(\"token : \"+ token);\r\n\r\n      res.setHeader(\r\n        \"Set-Cookie\",\r\n        `access_token=${token}; path=/; expires=${new Date(Date.now() + 60 * 60 * 24 * 1000 * 3).toISOString()}; httponly`\r\n      );\r\n\r\n      const newUserWithoutPassword: Partial<Pick<StoredUserType,\"password\">> = newUser;\r\n\r\n      // delete을 사용하여 객체의 속성을 제거할 수 있다.\r\n      // 비밀번호가 일치한다면, 유저 정보에서 password를 제거하여 보내고, 회원가입 떄와 동일하게 token을 전달하도록 한다.\r\n      delete newUserWithoutPassword.password;\r\n      res.statusCode = 200;\r\n      return res.send(newUser);\r\n    }\r\n\r\n    res.statusCode = 405;\r\n\r\n    return res.end();\r\n};"]},"metadata":{},"sourceType":"module"}