{"ast":null,"code":"import _defineProperty from \"D:/SUNGHO/DEV/Next Class/next-airbnb/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _objectWithoutProperties from \"D:/SUNGHO/DEV/Next Class/next-airbnb/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"D:\\\\SUNGHO\\\\DEV\\\\Next Class\\\\next-airbnb\\\\components\\\\common\\\\Button.tsx\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport styled, { css } from \"styled-components\";\nimport palette from \"../../styles/palette\"; // * 버튼 색상 구하기\n\nvar getButtonColor = function getButtonColor(color) {\n  switch (color) {\n    case \"dark_cyan\":\n      return css([\"background-color:\", \";\"], palette.dark_cyan);\n\n    default:\n      return css([\"background-color:\", \";\"], palette.bittersweet);\n  }\n};\n\nvar Container = styled.button.withConfig({\n  displayName: \"Button__Container\",\n  componentId: \"sc-1h0fxq-0\"\n})([\"width:100%;height:48px;border:0;border-radius:4px;background-color:\", \";color:white;font-size:16px;font-weight:800;outline:none;cursor:pointer;\", \"\"], palette.bittersweet, function (props) {\n  return getButtonColor(props.color || \"\");\n});\n_c = Container;\n\nvar Button = function Button(_ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  return /*#__PURE__*/_jsxDEV(Container, _objectSpread(_objectSpread({}, props), {}, {\n    children: children\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 10\n  }, _this);\n};\n\n_c2 = Button;\nexport default _c3 = /*#__PURE__*/React.memo(Button);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["D:/SUNGHO/DEV/Next Class/next-airbnb/components/common/Button.tsx"],"names":["React","styled","css","palette","getButtonColor","color","dark_cyan","bittersweet","Container","button","props","Button","children","memo"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,IAAgBC,GAAhB,QAA0B,mBAA1B;AACA,OAAOC,OAAP,MAAoB,sBAApB,C,CAEA;;AACA,IAAMC,cAAc,GAAC,SAAfA,cAAe,CAACC,KAAD,EAAgB;AACnC,UAAOA,KAAP;AACE,SAAK,WAAL;AACE,aAAOH,GAAP,6BACqBC,OAAO,CAACG,SAD7B;;AAGF;AACE,aAAOJ,GAAP,6BACqBC,OAAO,CAACI,WAD7B;AANJ;AAUD,CAXD;;AAYA,IAAMC,SAAS,GAAGP,MAAM,CAACQ,MAAV;AAAA;AAAA;AAAA,4JAKON,OAAO,CAACI,WALf,EAWX,UAACG,KAAD;AAAA,SAASN,cAAc,CAACM,KAAK,CAACL,KAAN,IAAe,EAAhB,CAAvB;AAAA,CAXW,CAAf;KAAMG,S;;AAmBN,IAAMG,MAAwB,GAAG,SAA3BA,MAA2B,OAA4B;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAZF,KAAY;;AAC3D,sBAAO,QAAC,SAAD,kCAAeA,KAAf;AAAA,cAAuBE;AAAvB;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,CAFD;;MAAMD,M;AAIN,kCAAeX,KAAK,CAACa,IAAN,CAAWF,MAAX,CAAf","sourcesContent":["import React from \"react\"\r\nimport styled, {css} from \"styled-components\"\r\nimport palette from \"../../styles/palette\"\r\n\r\n// * 버튼 색상 구하기\r\nconst getButtonColor=(color:string)=>{\r\n  switch(color){\r\n    case \"dark_cyan\":\r\n      return css`\r\n        background-color:${palette.dark_cyan};\r\n      `;\r\n    default:\r\n      return css`\r\n        background-color:${palette.bittersweet};\r\n      `;\r\n  }\r\n};\r\nconst Container = styled.button`\r\n  width:100%;\r\n  height: 48px;\r\n  border: 0;\r\n  border-radius: 4px;\r\n  background-color: ${palette.bittersweet};\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: 800;\r\n  outline:none;\r\n  cursor: pointer;\r\n  ${(props)=>getButtonColor(props.color || \"\")}\r\n`;\r\n\r\ninterface IProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  children: React.ReactNode;\r\n  color?: \"dark_cyan\";\r\n}\r\n\r\nconst Button: React.FC<IProps> = ({ children, ...props }) => {\r\n  return <Container {...props}>{children}</Container>;\r\n};\r\n\r\nexport default React.memo(Button);"]},"metadata":{},"sourceType":"module"}