{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  validateMode: false\n};\nconst common = createSlice({\n  name: \"common\",\n  initialState,\n  reducers: {\n    // validateMode 변경하기\n    setValidateMode(state, action) {\n      state.validateMode = action.payload;\n    }\n\n  }\n});\nexport const commonActions = _objectSpread({}, common.actions);\nexport default common;","map":{"version":3,"sources":["D:/SUNGHO/DEV/Next Class/next-airbnb/store/common.ts"],"names":["createSlice","initialState","validateMode","common","name","reducers","setValidateMode","state","action","payload","commonActions","actions"],"mappings":";;;;;;AAAA,SAAQA,WAAR,QAA0C,kBAA1C;AAGA,MAAMC,YAAyB,GAAG;AAChCC,EAAAA,YAAY,EAAE;AADkB,CAAlC;AAIA,MAAMC,MAAM,GAAGH,WAAW,CAAC;AACzBI,EAAAA,IAAI,EAAE,QADmB;AAEzBH,EAAAA,YAFyB;AAGzBI,EAAAA,QAAQ,EAAE;AACR;AACAC,IAAAA,eAAe,CAACC,KAAD,EAAQC,MAAR,EAAuC;AACpDD,MAAAA,KAAK,CAACL,YAAN,GAAqBM,MAAM,CAACC,OAA5B;AACD;;AAJO;AAHe,CAAD,CAA1B;AAWA,OAAO,MAAMC,aAAa,qBAAOP,MAAM,CAACQ,OAAd,CAAnB;AAEP,eAAeR,MAAf","sourcesContent":["import {createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport { CommonState} from \"../types/reduxState\"\r\n\r\nconst initialState: CommonState = {\r\n  validateMode: false,\r\n};\r\n\r\nconst common = createSlice({\r\n  name: \"common\",\r\n  initialState,\r\n  reducers: {\r\n    // validateMode 변경하기\r\n    setValidateMode(state, action: PayloadAction<boolean>){\r\n      state.validateMode = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const commonActions = {...common.actions};\r\n\r\nexport default common;"]},"metadata":{},"sourceType":"module"}