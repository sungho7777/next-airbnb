{"ast":null,"code":"import bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport Data from \"../../../lib/data\";\nexport default (async (req, res) => {\n  //* 계정 생성하기\n  if (req.method === \"POST\") {\n    //* 값을 받았는지 확인\n    const {\n      body\n    } = req;\n    const {\n      email,\n      firstname,\n      lastname,\n      password,\n      birthday\n    } = body;\n\n    if (!email || !firstname || !lastname || !password || !birthday) {\n      res.statusCode = 400;\n      return res.send(\"필수 데이터가 없습니다.\");\n    }\n\n    const hashedPassword = bcrypt.hashSync(password, 8);\n    const users = await Data.user.getList();\n    let userId;\n\n    if (users.length === 0) {\n      userId = 1;\n    } else {\n      userId = users[users.length - 1].id + 1;\n    }\n\n    const newUser = {\n      id: userId,\n      email,\n      firstname,\n      lastname,\n      password: hashedPassword,\n      birthday,\n      profileImage: \"/staic/image/user/default_user_profile_image.jpg\"\n    };\n    Data.user.write([...users, newUser]);\n    const userExists = await Data.user.exist({\n      email\n    });\n\n    if (userExists) {\n      res.statusCode = 409;\n      return res.send(\"이미 가입한 이메일 입니다.\");\n    }\n\n    const token = jwt.sign(String(newUser.id), process.env.JWT_SECRETI);\n    res.setHeader(\"Set-Cookie\", `access_token=${token}; path=/; expires=${new Date(Date.now() + 60 * 60 * 24 * 1000 * 3 //3일\n    )}; httponly`);\n    return res.end();\n  }\n\n  res.statusCode = 405;\n  return res.end();\n});\n/*\r\n\r\n    263 page \r\n        새 유저 리덕스 저장시 소스 코딩 어디에??\r\n\r\n\r\n\r\n\r\n\r\n*/","map":{"version":3,"sources":["D:/SUNGHO/DEV/Next Class/next-airbnb/pages/api/auth/signup.ts"],"names":["bcrypt","jwt","Data","req","res","method","body","email","firstname","lastname","password","birthday","statusCode","send","hashedPassword","hashSync","users","user","getList","userId","length","id","newUser","profileImage","write","userExists","exist","token","sign","String","process","env","JWT_SECRETI","setHeader","Date","now","end"],"mappings":"AACA,OAAOA,MAAP,MAAmB,UAAnB;AAEA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAIA,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AAChE;AACA,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AAEvB;AACA,UAAM;AACFC,MAAAA;AADE,QAIFH,GAJJ;AAOA,UAAM;AAAEI,MAAAA,KAAF;AAASC,MAAAA,SAAT;AAAoBC,MAAAA,QAApB;AAA8BC,MAAAA,QAA9B;AAAwCC,MAAAA;AAAxC,QAAqDL,IAA3D;;AACA,QAAI,CAACC,KAAD,IAAU,CAACC,SAAX,IAAwB,CAACC,QAAzB,IAAqC,CAACC,QAAtC,IAAkD,CAACC,QAAvD,EAAiE;AAC7DP,MAAAA,GAAG,CAACQ,UAAJ,GAAiB,GAAjB;AACA,aAAOR,GAAG,CAACS,IAAJ,CAAS,eAAT,CAAP;AACH;;AAED,UAAMC,cAAc,GAAGd,MAAM,CAACe,QAAP,CAAgBL,QAAhB,EAA0B,CAA1B,CAAvB;AAEA,UAAMM,KAAK,GAAG,MAAMd,IAAI,CAACe,IAAL,CAAUC,OAAV,EAApB;AACA,QAAIC,MAAJ;;AACA,QAAGH,KAAK,CAACI,MAAN,KAAe,CAAlB,EAAoB;AAChBD,MAAAA,MAAM,GAAC,CAAP;AACH,KAFD,MAEK;AACDA,MAAAA,MAAM,GAACH,KAAK,CAACA,KAAK,CAACI,MAAN,GAAa,CAAd,CAAL,CAAsBC,EAAtB,GAA0B,CAAjC;AACH;;AACD,UAAMC,OAAsB,GAAC;AACzBD,MAAAA,EAAE,EAACF,MADsB;AAEzBZ,MAAAA,KAFyB;AAGzBC,MAAAA,SAHyB;AAIzBC,MAAAA,QAJyB;AAKzBC,MAAAA,QAAQ,EAAEI,cALe;AAMzBH,MAAAA,QANyB;AAOzBY,MAAAA,YAAY,EAAC;AAPY,KAA7B;AAUArB,IAAAA,IAAI,CAACe,IAAL,CAAUO,KAAV,CAAgB,CAAC,GAAGR,KAAJ,EAAWM,OAAX,CAAhB;AAEA,UAAMG,UAAU,GAAG,MAAMvB,IAAI,CAACe,IAAL,CAAUS,KAAV,CAAgB;AAAEnB,MAAAA;AAAF,KAAhB,CAAzB;;AACA,QAAIkB,UAAJ,EAAgB;AACZrB,MAAAA,GAAG,CAACQ,UAAJ,GAAiB,GAAjB;AACA,aAAOR,GAAG,CAACS,IAAJ,CAAS,iBAAT,CAAP;AACH;;AAED,UAAMc,KAAK,GAAG1B,GAAG,CAAC2B,IAAJ,CAASC,MAAM,CAACP,OAAO,CAACD,EAAT,CAAf,EAA6BS,OAAO,CAACC,GAAR,CAAYC,WAAzC,CAAd;AACA5B,IAAAA,GAAG,CAAC6B,SAAJ,CACI,YADJ,EAEK,gBAAeN,KAAM,qBAAoB,IAAIO,IAAJ,CACtCA,IAAI,CAACC,GAAL,KAAa,KAAK,EAAL,GAAU,EAAV,GAAe,IAAf,GAAsB,CADG,CACD;AADC,KAExC,YAJN;AASA,WAAO/B,GAAG,CAACgC,GAAJ,EAAP;AACH;;AAGDhC,EAAAA,GAAG,CAACQ,UAAJ,GAAiB,GAAjB;AAEA,SAAOR,GAAG,CAACgC,GAAJ,EAAP;AACH,CA9DD;AAkEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {NextApiRequest, NextApiResponse} from \"next\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nimport jwt from \"jsonwebtoken\";\r\nimport Data from \"../../../lib/data\";\r\nimport { SingUpAPIBody } from \"../../../types/auth\";\r\nimport { StoredUserType } from \"../../../types/user\";\r\n\r\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\r\n    //* 계정 생성하기\r\n    if (req.method === \"POST\") {\r\n            \r\n        //* 값을 받았는지 확인\r\n        const {\r\n            body,\r\n        }: {\r\n            body: SingUpAPIBody;\r\n        } = req;\r\n        \r\n\r\n        const { email, firstname, lastname, password, birthday } = body;\r\n        if (!email || !firstname || !lastname || !password || !birthday) {\r\n            res.statusCode = 400;\r\n            return res.send(\"필수 데이터가 없습니다.\");\r\n        }\r\n\r\n        const hashedPassword = bcrypt.hashSync(password, 8);\r\n\r\n        const users = await Data.user.getList();\r\n        let userId;\r\n        if(users.length===0){\r\n            userId=1;\r\n        }else{\r\n            userId=users[users.length-1].id +1;\r\n        }\r\n        const newUser:StoredUserType={\r\n            id:userId,\r\n            email,\r\n            firstname,\r\n            lastname,\r\n            password: hashedPassword,\r\n            birthday,\r\n            profileImage:\"/staic/image/user/default_user_profile_image.jpg\",\r\n        };\r\n\r\n        Data.user.write([...users, newUser]);\r\n\r\n        const userExists = await Data.user.exist({ email });\r\n        if (userExists) {\r\n            res.statusCode = 409;\r\n            return res.send(\"이미 가입한 이메일 입니다.\");\r\n        }\r\n\r\n        const token = jwt.sign(String(newUser.id), process.env.JWT_SECRETI);\r\n        res.setHeader(\r\n            \"Set-Cookie\",\r\n            `access_token=${token}; path=/; expires=${new Date(\r\n                Date.now() + 60 * 60 * 24 * 1000 * 3 //3일\r\n            )}; httponly`\r\n        );\r\n\r\n\r\n\r\n        return res.end();\r\n    }\r\n\r\n\r\n    res.statusCode = 405;\r\n\r\n    return res.end();\r\n};\r\n\r\n\r\n\r\n/*\r\n\r\n    263 page \r\n        새 유저 리덕스 저장시 소스 코딩 어디에??\r\n\r\n\r\n\r\n\r\n\r\n*/"]},"metadata":{},"sourceType":"module"}