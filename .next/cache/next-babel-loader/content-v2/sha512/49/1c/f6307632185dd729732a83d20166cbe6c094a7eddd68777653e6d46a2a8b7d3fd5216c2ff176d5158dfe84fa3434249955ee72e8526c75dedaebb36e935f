{"ast":null,"code":"import _defineProperty from \"D:/SUNGHO/DEV/Next Class/next-airbnb/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HYDRATE, createWrapper } from \"next-redux-wrapper\";\nimport { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport { useSelector as useReduxSelector } from \"react-redux\";\nimport user from \"./user\";\nimport common from \"./common\";\nimport auth from \"./auth\";\nvar rootReducer = combineReducers({\n  common: common.reducer,\n  user: user.reducer,\n  auth: auth.reducer\n}); // * 스토어 타입\n\nvar initialRootState;\n\nvar reducer = function reducer(state, action) {\n  if (action.type === HYDRATE) {\n    if (state === initialRootState) {\n      return _objectSpread(_objectSpread({}, state), action.payload);\n    }\n\n    return state;\n  }\n\n  return rootReducer(state, action);\n}; // * 타입 지원되는 커스텀 useSelector 만들기\n\n\nexport var useSelector = useReduxSelector;\n\nvar initStore = function initStore() {\n  var store = configureStore({\n    reducer: reducer,\n    devTools: true\n  });\n  initialRootState = store.getState();\n  return store;\n};\n\nexport var wrapper = createWrapper(initStore);","map":{"version":3,"sources":["D:/SUNGHO/DEV/Next Class/next-airbnb/store/index.ts"],"names":["HYDRATE","createWrapper","configureStore","combineReducers","useSelector","useReduxSelector","user","common","auth","rootReducer","reducer","initialRootState","state","action","type","payload","initStore","store","devTools","getState","wrapper"],"mappings":";;;;;;AAAA,SAASA,OAAT,EAAkBC,aAAlB,QAAkD,oBAAlD;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,kBAAhD;AACA,SAEEC,WAAW,IAAIC,gBAFjB,QAGO,aAHP;AAIA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,IAAMC,WAAW,GAAGN,eAAe,CAAC;AAChCI,EAAAA,MAAM,EAAEA,MAAM,CAACG,OADiB;AAEhCJ,EAAAA,IAAI,EAAEA,IAAI,CAACI,OAFqB;AAGhCF,EAAAA,IAAI,EAAEA,IAAI,CAACE;AAHqB,CAAD,CAAnC,C,CAMA;;AAGA,IAAIC,gBAAJ;;AAEA,IAAMD,OAAO,GAAG,SAAVA,OAAU,CAACE,KAAD,EAAYC,MAAZ,EAAyB;AACrC,MAAGA,MAAM,CAACC,IAAP,KAAgBd,OAAnB,EAA2B;AACvB,QAAIY,KAAK,KAAKD,gBAAd,EAAgC;AAC5B,6CACGC,KADH,GAEGC,MAAM,CAACE,OAFV;AAIH;;AACD,WAAOH,KAAP;AACH;;AACD,SAAOH,WAAW,CAACG,KAAD,EAAQC,MAAR,CAAlB;AACH,CAXD,C,CAaA;;;AACA,OAAO,IAAMT,WAA2C,GAAGC,gBAApD;;AAEP,IAAMW,SAAmB,GAAC,SAApBA,SAAoB,GAAI;AAC1B,MAAMC,KAAK,GAAGf,cAAc,CAAC;AACzBQ,IAAAA,OAAO,EAAPA,OADyB;AAEzBQ,IAAAA,QAAQ,EAAC;AAFgB,GAAD,CAA5B;AAIAP,EAAAA,gBAAgB,GAAGM,KAAK,CAACE,QAAN,EAAnB;AACA,SAAOF,KAAP;AACH,CAPD;;AASA,OAAO,IAAMG,OAAO,GAAGnB,aAAa,CAACe,SAAD,CAA7B","sourcesContent":["import { HYDRATE, createWrapper, MakeStore } from \"next-redux-wrapper\";\r\nimport { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\nimport {\r\n  TypedUseSelectorHook,\r\n  useSelector as useReduxSelector,\r\n} from \"react-redux\";\r\nimport user from \"./user\";\r\nimport common from \"./common\";\r\nimport auth from \"./auth\";\r\n\r\nconst rootReducer = combineReducers({\r\n    common: common.reducer,\r\n    user: user.reducer,\r\n    auth: auth.reducer,\r\n});\r\n\r\n// * 스토어 타입\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nlet initialRootState: RootState;\r\n\r\nconst reducer = (state:any, action:any)=>{\r\n    if(action.type === HYDRATE){\r\n        if (state === initialRootState) {\r\n            return {\r\n            ...state,\r\n            ...action.payload,\r\n            };\r\n        }\r\n        return state;\r\n    }\r\n    return rootReducer(state, action);\r\n};\r\n\r\n// * 타입 지원되는 커스텀 useSelector 만들기\r\nexport const useSelector:TypedUseSelectorHook<RootState> = useReduxSelector;\r\n\r\nconst initStore:MakeStore=()=>{\r\n    const store = configureStore({\r\n        reducer,\r\n        devTools:true,\r\n    });\r\n    initialRootState = store.getState();\r\n    return store;\r\n};\r\n\r\nexport const wrapper = createWrapper(initStore);"]},"metadata":{},"sourceType":"module"}