{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n// 초기 상태\nconst initialState = {\n  id: 0,\n  email: \"\",\n  lastname: \"\",\n  firstname: \"\",\n  birthday: \"\",\n  isLogged: false,\n  profileImage: \"\"\n};\nconst user = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    // 로그인한 유저 변경하기\n    setLoggedUser(state, action) {\n      state = _objectSpread(_objectSpread({}, action.payload), {}, {\n        isLogged: true\n      });\n      return state;\n    },\n\n    // 유저 초기화 하기\n    initUser(state) {\n      state = initialState;\n      return state;\n    }\n\n  }\n});\nexport const userActions = _objectSpread({}, user.actions);\nexport default user;","map":{"version":3,"sources":["D:/SUNGHO/DEV/Next Class/next-airbnb/store/user.ts"],"names":["createSlice","initialState","id","email","lastname","firstname","birthday","isLogged","profileImage","user","name","reducers","setLoggedUser","state","action","payload","initUser","userActions","actions"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAIA;AACA,MAAMC,YAAsB,GAAG;AAC7BC,EAAAA,EAAE,EAAC,CAD0B;AAE7BC,EAAAA,KAAK,EAAE,EAFsB;AAG7BC,EAAAA,QAAQ,EAAE,EAHmB;AAI7BC,EAAAA,SAAS,EAAE,EAJkB;AAK7BC,EAAAA,QAAQ,EAAE,EALmB;AAM7BC,EAAAA,QAAQ,EAAE,KANmB;AAO7BC,EAAAA,YAAY,EAAE;AAPe,CAA/B;AAUA,MAAMC,IAAI,GAAGT,WAAW,CAAC;AACvBU,EAAAA,IAAI,EAAE,MADiB;AAEvBT,EAAAA,YAFuB;AAGvBU,EAAAA,QAAQ,EAAE;AACR;AACAC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAyC;AACpDD,MAAAA,KAAK,mCAAOC,MAAM,CAACC,OAAd;AAAuBR,QAAAA,QAAQ,EAAE;AAAjC,QAAL;AACA,aAAOM,KAAP;AACD,KALO;;AAMR;AACAG,IAAAA,QAAQ,CAACH,KAAD,EAAQ;AACdA,MAAAA,KAAK,GAAGZ,YAAR;AACA,aAAOY,KAAP;AACD;;AAVO;AAHa,CAAD,CAAxB;AAiBA,OAAO,MAAMI,WAAW,qBAAOR,IAAI,CAACS,OAAZ,CAAjB;AAEP,eAAeT,IAAf","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport {UserType} from \"../types/user\"\r\nimport {UserState} from \"../types/reduxState\"\r\n\r\n// 초기 상태\r\nconst initialState:UserState = {\r\n  id:0,\r\n  email: \"\",\r\n  lastname: \"\",\r\n  firstname: \"\",\r\n  birthday: \"\",\r\n  isLogged: false,\r\n  profileImage: \"\",\r\n};\r\n\r\nconst user = createSlice({\r\n  name: \"user\",\r\n  initialState,\r\n  reducers: {\r\n    // 로그인한 유저 변경하기\r\n    setLoggedUser(state, action: PayloadAction<UserType>) {\r\n      state = {...action.payload, isLogged: true};\r\n      return state;\r\n    },\r\n    // 유저 초기화 하기\r\n    initUser(state) {\r\n      state = initialState;\r\n      return state;\r\n    }\r\n  }\r\n});\r\n\r\nexport const userActions = {...user.actions};\r\n\r\nexport default user;"]},"metadata":{},"sourceType":"module"}