{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\SUNGHO\\\\DEV\\\\Next Class\\\\next-airbnb\\\\components\\\\room\\\\register\\\\RegisterRoomPublicBedTypes.tsx\";\nimport React, { useMemo, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { bedTypes } from \"../../../lib/staticData\";\nimport { useSelector } from \"../../../store\";\nimport { registerRoomActions } from \"../../../store/registerRoom\";\nimport palette from \"../../../styles/palette\";\nimport Button from \"../../common/Button\";\nimport Counter from \"../../common/Counter\";\nimport Selector from \"../../common/Selector\";\nconst Container = styled.li.withConfig({\n  displayName: \"RegisterRoomPublicBedTypes__Container\",\n  componentId: \"sc-1kbf1wt-0\"\n})([\"width:100%;padding:28px 0;border-top:1px solid \", \";&:last-child{border-bottom:1px solid \", \";}.register-room-bed-type-top{display:flex;justify-content:space-between;align-items:center;}.register-room-bed-type-bedroom{font-size:19px;color:\", \";}.register-room-public-bed-type-counters{width:320px;margin-top:28px;}.register-room-bed-type-bedroom-counts{font-size:19px;color:\", \";}.register-room-bed-type-counter{width:290px;margin-bottom:18px;}\"], palette.gray_dd, palette.gray_dd, palette.gray_48, palette.gray_76);\n\nconst RegisterRoomPublicBedTypes = () => {\n  const {\n    0: opened,\n    1: setOpened\n  } = useState(false);\n  const publicBedList = useSelector(state => state.registerRoom.publicBedList);\n  const dispatch = useDispatch();\n  const totalBedsCount = useMemo(() => {\n    let total = 0;\n    publicBedList.forEach(bed => {\n      total += bed.count;\n    });\n    return total;\n  }, [publicBedList]);\n  const bedsText = useMemo(() => {\n    const texts = publicBedList.map(bed => `${bed.type} ${bed.count}개`);\n    return texts.join(\",\");\n  }, [publicBedList]);\n\n  const initialBedOptions = () => publicBedList.map(bed => bed.type); //* 선택된 침대 옵션들\n\n\n  const {\n    0: activedBedOptions,\n    1: setActivedBedOptions\n  } = useState(initialBedOptions); //* 남은 침대 옵션들\n\n  const lastBedOptions = useMemo(() => {\n    return bedTypes.filter(bedType => !activedBedOptions.includes(bedType));\n  }, [activedBedOptions, publicBedList]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register-room-bed-type-top\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"register-room-bed-type-bedroom\",\n          children: \"\\uACF5\\uC6A9\\uACF5\\uAC04\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"register-room-bed-type-bedroom-counts\",\n          children: [\"\\uCE68\\uB300 \", totalBedsCount, \"\\uAC1C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: bedsText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setOpened(!opened),\n        children: [opened && \"완료\", !opened && (totalBedsCount === 0 ? \"침대 추가하기\" : \"침대 수정하기\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), opened && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register-room-public-bed-type-counters\",\n      children: [activedBedOptions.map(type => {\n        var _publicBedList$find;\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"register-room-bed-type-counter\",\n          children: /*#__PURE__*/_jsxDEV(Counter, {\n            label: type,\n            value: ((_publicBedList$find = publicBedList.find(bed => bed.type === type)) === null || _publicBedList$find === void 0 ? void 0 : _publicBedList$find.count) || 0,\n            onChange: value => dispatch(registerRoomActions.setPublicBedTypeCount({\n              // * 공용공간 침대 유형 개수 변경하기.\n              type,\n              count: value\n            }))\n          }, type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this)\n        }, type, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(Selector, {\n        type: \"register\",\n        options: lastBedOptions,\n        disabledOptions: [\"다른 침대 추가\"],\n        value: \"\\uB2E4\\uB978 \\uCE68\\uB300 \\uCD94\\uAC00\",\n        useValidation: false,\n        onChange: e => setActivedBedOptions([...activedBedOptions, e.target.value])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\nexport default /*#__PURE__*/React.memo(RegisterRoomPublicBedTypes);","map":{"version":3,"sources":["D:/SUNGHO/DEV/Next Class/next-airbnb/components/room/register/RegisterRoomPublicBedTypes.tsx"],"names":["React","useMemo","useState","useDispatch","styled","bedTypes","useSelector","registerRoomActions","palette","Button","Counter","Selector","Container","li","gray_dd","gray_48","gray_76","RegisterRoomPublicBedTypes","opened","setOpened","publicBedList","state","registerRoom","dispatch","totalBedsCount","total","forEach","bed","count","bedsText","texts","map","type","join","initialBedOptions","activedBedOptions","setActivedBedOptions","lastBedOptions","filter","bedType","includes","find","value","setPublicBedTypeCount","e","target","memo"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { bedTypes } from \"../../../lib/staticData\";\r\nimport { useSelector } from \"../../../store\";\r\nimport { registerRoomActions } from \"../../../store/registerRoom\";\r\nimport palette from \"../../../styles/palette\";\r\nimport { BedType } from \"../../../types/room\";\r\nimport Button from \"../../common/Button\";\r\nimport Counter from \"../../common/Counter\";\r\nimport Selector from \"../../common/Selector\";\r\n\r\n\r\nconst Container = styled.li`\r\n  width: 100%;\r\n  padding: 28px 0;\r\n  border-top: 1px solid ${palette.gray_dd};\r\n  &:last-child {\r\n    border-bottom: 1px solid ${palette.gray_dd};\r\n  }\r\n\r\n  .register-room-bed-type-top {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n  .register-room-bed-type-bedroom {\r\n    font-size: 19px;\r\n    color: ${palette.gray_48};\r\n  }\r\n  .register-room-public-bed-type-counters {\r\n    width: 320px;\r\n    margin-top: 28px;\r\n  }\r\n  .register-room-bed-type-bedroom-counts {\r\n    font-size: 19px;\r\n    color: ${palette.gray_76};\r\n  }\r\n  .register-room-bed-type-counter {\r\n    width: 290px;\r\n    margin-bottom: 18px;\r\n  }\r\n`;\r\n\r\nconst RegisterRoomPublicBedTypes: React.FC = () => {\r\n  const [opened, setOpened] = useState(false);\r\n  const publicBedList = useSelector(\r\n    (state) => state.registerRoom.publicBedList\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const totalBedsCount = useMemo(() => {\r\n    let total = 0;\r\n    publicBedList.forEach((bed) => {\r\n      total += bed.count;\r\n    });\r\n    return total;\r\n  }, [publicBedList]);\r\n\r\n  const bedsText = useMemo(() => {\r\n    const texts = publicBedList.map((bed) => `${bed.type} ${bed.count}개`);\r\n    return texts.join(\",\");\r\n  }, [publicBedList]);\r\n\r\n  const initialBedOptions = () => publicBedList.map((bed) => bed.type);\r\n  //* 선택된 침대 옵션들\r\n  const [activedBedOptions, setActivedBedOptions] = useState<BedType[]>(\r\n    initialBedOptions\r\n  );\r\n\r\n  //* 남은 침대 옵션들\r\n  const lastBedOptions = useMemo(() => {\r\n    return bedTypes.filter((bedType) => !activedBedOptions.includes(bedType));\r\n  }, [activedBedOptions, publicBedList]);\r\n\r\n  return (\r\n    <Container>\r\n      <div className=\"register-room-bed-type-top\">\r\n        <div>\r\n          <p className=\"register-room-bed-type-bedroom\">공용공간</p>\r\n          <p className=\"register-room-bed-type-bedroom-counts\">\r\n            침대 {totalBedsCount}개\r\n          </p>\r\n          <p>{bedsText}</p>\r\n        </div>\r\n        <Button onClick={() => setOpened(!opened)}>\r\n          {opened && \"완료\"}\r\n          {!opened &&\r\n            (totalBedsCount === 0 ? \"침대 추가하기\" : \"침대 수정하기\")}\r\n        </Button>\r\n      </div>\r\n      {opened && (\r\n        <div className=\"register-room-public-bed-type-counters\">\r\n          {activedBedOptions.map((type) => (\r\n            <div className=\"register-room-bed-type-counter\" key={type}>\r\n              <Counter\r\n                label={type}\r\n                value={\r\n                  publicBedList.find((bed) => bed.type === type)?.count || 0\r\n                }\r\n                key={type}\r\n                onChange={(value) =>\r\n                  dispatch(\r\n                    registerRoomActions.setPublicBedTypeCount({ // * 공용공간 침대 유형 개수 변경하기.\r\n                      type,\r\n                      count: value,\r\n                    })\r\n                  )\r\n                }\r\n              />\r\n            </div>\r\n          ))}\r\n          <Selector\r\n            type=\"register\"\r\n            options={lastBedOptions}\r\n            disabledOptions={[\"다른 침대 추가\"]}\r\n            value=\"다른 침대 추가\"\r\n            useValidation={false}\r\n            onChange={(e) =>\r\n              setActivedBedOptions([\r\n                ...activedBedOptions,\r\n                e.target.value as BedType,\r\n              ])\r\n            }\r\n          />\r\n        </div>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default React.memo(RegisterRoomPublicBedTypes);"]},"metadata":{},"sourceType":"module"}