{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\SUNGHO\\\\DEV\\\\Next Class\\\\next-airbnb\\\\components\\\\room\\\\register\\\\RegisterRoomBedTypes.tsx\";\nimport React, { useMemo, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { bedTypes } from \"../../../lib/staticData\";\nimport { useSelector } from \"../../../store\";\nimport { registerRoomActions } from \"../../../store/registerRoom\";\nimport palette from \"../../../styles/palette\";\nimport Button from \"../../common/Button\";\nimport Selector from \"../../common/Selector\";\nconst Container = styled.li.withConfig({\n  displayName: \"RegisterRoomBedTypes__Container\",\n  componentId: \"e0v542-0\"\n})([\"width:100%;padding:28px 0;border-top:1px solid \", \";&:last-child{border-bottom:1px solid \", \";}.register-room-bed-type-top{display:flex;justify-content:space-between;}.register-room-bed-type-bedroom{font-size:19px;color:\", \";}.register-room-public-bed-type-counters{width:320px;margin-top:28px;}.register-room-bed-type-selector-wrapper{margin-top:28px;width:320px;}.register-room-bed-type-counters{font-size:19px;color:\", \";}.register-room-bed-type-counter{width:290px;margin-bottom:18px;}\"], palette.gray_dd, palette.gray_dd, palette.gray_48, palette.gray_76);\n\nconst RegisterRoomBedTypes = ({\n  bedroom\n}) => {\n  const {\n    0: opened,\n    1: setOpened\n  } = useState(false);\n  const publicBedList = useSelector(state => state.registerRoom.publicBedList);\n  const dispatch = useDispatch(); // * 침대 개수 총합\n\n  const totalBedsCount = useMemo(() => {\n    let total = 0;\n    bedroom.beds.forEach(bed => {\n      total += bed.count;\n    });\n    return total;\n  }, [bedroom]); // * 침대 종류 텍스트\n\n  const bedsText = useMemo(() => {\n    const texts = bedroom.beds.map(bed => `${bed.type} ${bed.count} 개`);\n    return texts.join(\",\");\n  }, []);\n  const initialBedOptions = bedroom.beds.map(bed => bed.type); // * 선택된 침대 옵션들\n\n  const {\n    0: activedBedOptions,\n    1: setActivedBedOptions\n  } = useState(initialBedOptions); // * 남은 침대 옵션들\n\n  const lastBedOptions = useMemo(() => {\n    return bedTypes.filter(bedType => !activedBedOptions.includes(bedType));\n  }, [activedBedOptions, bedroom]); // * 침실 침대 개수 변경 시\n\n  const onChangeBedTypeCount = (value, type) => dispatch(registerRoomActions.setBedTypeCount({\n    bedroomId: bedroom.id,\n    type,\n    count: value\n  })); // * 침실 유형 열고 닫기\n\n\n  const toggleOpend = () => setOpened(!opened);\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register-room-bed-type-top\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"register-room-bed-type-bedroom\",\n          children: \"\\uACF5\\uC6A9\\uACF5\\uAC04\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"register-room-bed-type-bedroom-counts\",\n          children: [\"\\uCE68\\uB300 \", totalBedsCount, \"\\uAC1C \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 46\n          }, this), bedsText]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setOpened(!opened),\n        styleType: \"register\",\n        color: \"white\",\n        children: [opened && \"완료\", !opened && (totalBedsCount === 0 ? \"침대 추가하기\" : \"침대 수정하기\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), opened && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register-room-bed-type-counters\",\n      children: activedBedOptions.map(type => {\n        var _publicBedList$find;\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"register-room-bed-type-counter\",\n          children: /*#__PURE__*/_jsxDEV(Container, {\n            label: type,\n            value: ((_publicBedList$find = publicBedList.find(bed => bed.type === type)) === null || _publicBedList$find === void 0 ? void 0 : _publicBedList$find.count) || 0,\n            onChange: value => {//onChangeBedTypeCount(value, type);\n            }\n          }, type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 29\n          }, this)\n        }, type, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }, this), opened && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register-room-bed-type-selector-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Selector, {\n        type: \"register\",\n        options: lastBedOptions,\n        defaultValue: \"\\uB2E4\\uB978 \\uCE68\\uB300 \\uCD94\\uAC00\",\n        value: \"\\uB2E4\\uB978 \\uCE68\\uB300 \\uCD94\\uAC00\",\n        disabledOptions: [\"다른 침대 추가\"],\n        useValidation: false,\n        onChange: e => setActivedBedOptions([...activedBedOptions, e.target.value])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n\nexport default RegisterRoomBedTypes;","map":{"version":3,"sources":["D:/SUNGHO/DEV/Next Class/next-airbnb/components/room/register/RegisterRoomBedTypes.tsx"],"names":["React","useMemo","useState","useDispatch","styled","bedTypes","useSelector","registerRoomActions","palette","Button","Selector","Container","li","gray_dd","gray_48","gray_76","RegisterRoomBedTypes","bedroom","opened","setOpened","publicBedList","state","registerRoom","dispatch","totalBedsCount","total","beds","forEach","bed","count","bedsText","texts","map","type","join","initialBedOptions","activedBedOptions","setActivedBedOptions","lastBedOptions","filter","bedType","includes","onChangeBedTypeCount","value","setBedTypeCount","bedroomId","id","toggleOpend","find","e","target"],"mappings":"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","sourcesContent":["import React, {useMemo, useState} from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { bedTypes } from \"../../../lib/staticData\";\r\nimport {useSelector} from \"../../../store\";\r\nimport { registerRoomActions } from \"../../../store/registerRoom\";\r\nimport palette from \"../../../styles/palette\";\r\nimport {BedType} from \"../../../types/room\";\r\nimport Button from \"../../common/Button\";\r\nimport Counter from \"../../common/Counter\";\r\nimport Selector from \"../../common/Selector\";\r\n\r\nconst Container = styled.li`\r\n  width: 100%;\r\n  padding: 28px 0;\r\n  border-top: 1px solid ${palette.gray_dd};\r\n  &:last-child {\r\n    border-bottom: 1px solid ${palette.gray_dd};\r\n  }\r\n  .register-room-bed-type-top {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n  .register-room-bed-type-bedroom {\r\n    font-size: 19px;\r\n    color: ${palette.gray_48};\r\n  }\r\n  .register-room-public-bed-type-counters {\r\n    width: 320px;\r\n    margin-top: 28px;\r\n  }\r\n  .register-room-bed-type-selector-wrapper {\r\n    margin-top: 28px;\r\n    width: 320px;\r\n  }\r\n  .register-room-bed-type-counters {\r\n    font-size: 19px;\r\n    color: ${palette.gray_76};\r\n  }\r\n  .register-room-bed-type-counter {\r\n    width: 290px;\r\n    margin-bottom: 18px;\r\n  }\r\n`;\r\n\r\ninterface IProps{\r\n    bedroom:{id:number; beds:{type:BedType; count:number}[]};\r\n}\r\n\r\nconst RegisterRoomBedTypes: React.FC<IProps> = ({bedroom})=>{\r\n    const [opened, setOpened] = useState(false);\r\n    const publicBedList = useSelector((state)=>state.registerRoom.publicBedList);\r\n\r\n\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    // * 침대 개수 총합\r\n    const totalBedsCount = useMemo(()=>{\r\n        let total=0;\r\n        bedroom.beds.forEach((bed)=>{\r\n            total += bed.count;\r\n        });\r\n        return total;\r\n    }, [bedroom]);\r\n    // * 침대 종류 텍스트\r\n    const bedsText = useMemo(()=>{\r\n        const texts=bedroom.beds.map((bed) => `${bed.type} ${bed.count} 개`);\r\n        return texts.join(\",\");\r\n    }, []);\r\n\r\n    const initialBedOptions = bedroom.beds.map((bed) => bed.type);\r\n    // * 선택된 침대 옵션들\r\n    const [activedBedOptions, setActivedBedOptions] = useState<BedType[]>(\r\n        initialBedOptions\r\n    );\r\n    // * 남은 침대 옵션들\r\n    const lastBedOptions=useMemo(()=>{\r\n        return bedTypes.filter((bedType)=>!activedBedOptions.includes(bedType));\r\n    }, [activedBedOptions, bedroom]);\r\n\r\n    // * 침실 침대 개수 변경 시\r\n    const onChangeBedTypeCount = (value:Number, type:BedType) =>\r\n        dispatch(\r\n            registerRoomActions.setBedTypeCount({\r\n                bedroomId:bedroom.id,\r\n                type,\r\n                count: value,\r\n            })\r\n        );\r\n\r\n\r\n\r\n    // * 침실 유형 열고 닫기\r\n    const toggleOpend = () => setOpened(!opened);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Container>\r\n            \r\n        \r\n            <div className=\"register-room-bed-type-top\">\r\n                <div>\r\n                    <p className=\"register-room-bed-type-bedroom\">공용공간</p>\r\n                    <p className=\"register-room-bed-type-bedroom-counts\">\r\n                        침대 {totalBedsCount}개 <br />\r\n                        {bedsText}\r\n                    </p>\r\n                </div>\r\n                <Button \r\n                    onClick={()=>setOpened(!opened)}\r\n                    styleType=\"register\"\r\n                    color=\"white\"\r\n                >\r\n                    {opened && \"완료\"}\r\n                    {!opened &&\r\n                        (totalBedsCount === 0 ? \"침대 추가하기\":\"침대 수정하기\")\r\n                    }\r\n                </Button>\r\n            </div>\r\n            \r\n            {opened && (\r\n                <div className=\"register-room-bed-type-counters\">\r\n                    {activedBedOptions.map((type)=>(\r\n                        <div className=\"register-room-bed-type-counter\" key={type}>\r\n                            <Container\r\n                                label={type}\r\n                                value={\r\n                                    publicBedList.find((bed) => bed.type === type)?.count || 0\r\n                                }\r\n                                key={type}\r\n                                onChange={(value)=>{\r\n                                    //onChangeBedTypeCount(value, type);\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n\r\n\r\n            {opened && (\r\n                <div className=\"register-room-bed-type-selector-wrapper\">\r\n                    <Selector\r\n                        type=\"register\"\r\n                        options={lastBedOptions}\r\n                        defaultValue=\"다른 침대 추가\"\r\n                        value=\"다른 침대 추가\"\r\n                        disabledOptions={[\"다른 침대 추가\"]}\r\n                        useValidation={false}\r\n                        onChange={(e)=>setActivedBedOptions([\r\n                            ...activedBedOptions,\r\n                            e.target.value as BedType,\r\n                        ])}\r\n                    />\r\n                </div>\r\n            )}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default RegisterRoomBedTypes;"]},"metadata":{},"sourceType":"module"}