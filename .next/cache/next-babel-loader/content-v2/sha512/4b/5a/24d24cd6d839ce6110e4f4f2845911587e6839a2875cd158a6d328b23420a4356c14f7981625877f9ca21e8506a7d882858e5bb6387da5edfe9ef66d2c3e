{"ast":null,"code":"import _toConsumableArray from \"D:/SUNGHO/DEV/Next Class/next-airbnb/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\SUNGHO\\\\DEV\\\\Next Class\\\\next-airbnb\\\\components\\\\room\\\\register\\\\RegisterRoomBedTypes.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { bedTypes } from \"../../../lib/staticData\";\nimport { registerRoomActions } from \"../../../store/registerRoom\";\nimport palette from \"../../../styles/palette\";\nimport Button from \"../../common/Button\";\nimport Counter from \"../../common/Counter\";\nimport Selector from \"../../common/Selector\";\nvar Container = styled.li.withConfig({\n  displayName: \"RegisterRoomBedTypes__Container\",\n  componentId: \"e0v542-0\"\n})([\"width:100%;padding:28px 0;border-top:1px solid \", \";&:last-child{border-bottom:1px solid \", \";}.register-room-bed-type-top{display:flex;justify-content:space-between;}.register-room-bed-type-bedroom{font-size:19px;color:\", \";}.register-room-bed-type-selector-wrapper{margin-top:28px;width:320px;}.register-room-bed-type-counters{width:320px;margin-top:28px;}.register-room-bed-type-counter{width:290px;margin-bottom:18px;}.register-room-bed-type-bedroom-counts{font-size:19px;color:\", \";max-width:240px;word-break:keep-all;}\"], palette.gray_dd, palette.gray_dd, palette.gray_48, palette.gray_76);\n_c = Container;\n\nvar RegisterRoomBedTypes = function RegisterRoomBedTypes(_ref) {\n  _s();\n\n  var bedroom = _ref.bedroom;\n\n  var _useState = useState(false),\n      opened = _useState[0],\n      setOpened = _useState[1]; //* 선택된 침대 옵션들\n\n\n  var initialBedOptions = bedroom.beds.map(function (bed) {\n    return bed.type;\n  }); //* 선택된 침대 옵션들\n\n  /*\r\n    activedBedOptions는 useState를 사용 > 페이지 다시 접근 시 초기화\r\n    초기화를 막기위해 redux에 있는 값을 초기값으로 설정\r\n  */\n\n  var _useState2 = useState(initialBedOptions),\n      activedBedOptions = _useState2[0],\n      setActivedBedOptions = _useState2[1]; //* 남은 침대 옵션들\n  // 옵션에서 변경이 일어나면 클릭한 옵션을 셀렉트에서 제거한다.\n\n\n  var lastBedOptions = useMemo(function () {\n    return bedTypes.filter(function (bedType) {\n      return !activedBedOptions.includes(bedType);\n    });\n  }, [activedBedOptions, bedroom]);\n  console.log(\"activedBedOptions\");\n  console.log(activedBedOptions); //* 침대 개수 총합\n\n  var totalBedsCount = useMemo(function () {\n    var total = 0;\n    bedroom.beds.forEach(function (bed) {\n      total += bed.count;\n    });\n    return total;\n  }, [bedroom]); //* 침실 유형 열고 닫기\n\n  var toggleOpened = function toggleOpened() {\n    return setOpened(!opened);\n  }; //* 침실 침대 갯수 변경시\n\n\n  var onChangeBedTypeCount = function onChangeBedTypeCount(value, type) {\n    return dispatch(registerRoomActions.setBedTypeCount({\n      bedroomId: bedroom.id,\n      type: type,\n      count: value\n    }));\n  }; //* 침대 종류 텍스트\n\n\n  var bedsText = useMemo(function () {\n    var texts = bedroom.beds.map(function (bed) {\n      return \"\".concat(bed.type, \" \").concat(bed.count, \"\\uAC1C\");\n    });\n    return texts.join(\",\");\n  }, [bedroom]);\n  var dispatch = useDispatch(); //styleType=\"register\" color=\"white\"\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register-room-bed-type-top\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"register-room-bed-type-bedroom\",\n          children: [bedroom.id, \"\\uBC88 \\uCE68\\uC2E4\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"register-room-bed-type-bedroom-counts\",\n          children: [\"\\uCE68\\uB300 \", totalBedsCount, \"\\uAC1C\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 35\n          }, _this), bedsText]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: toggleOpened,\n        styleType: \"register\",\n        color: \"white\",\n        width: \"161px\",\n        children: [opened && \"완료\", !opened && (totalBedsCount === 0 ? \"침대 추가하기\" : \"침대 수정하기\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, _this), opened && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register-room-bed-type-selector-wrapper\",\n      children: [activedBedOptions.map(function (type) {\n        var _bedroom$beds$find;\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"register-room-bed-type-counter\",\n          children: /*#__PURE__*/_jsxDEV(Counter, {\n            label: type,\n            value: ((_bedroom$beds$find = bedroom.beds.find(function (bed) {\n              return bed.type === type;\n            })) === null || _bedroom$beds$find === void 0 ? void 0 : _bedroom$beds$find.count) || 0,\n            onChange: function onChange(value) {\n              onChangeBedTypeCount(value, type);\n            }\n          }, type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 17\n          }, _this)\n        }, type, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, _this);\n      }), /*#__PURE__*/_jsxDEV(Selector, {\n        type: \"register\",\n        options: lastBedOptions,\n        defaultValue: \"\\uB2E4\\uB978 \\uCE68\\uB300 \\uCD94\\uAC00\",\n        value: \"\\uB2E4\\uB978 \\uCE68\\uB300 \\uCD94\\uAC00\",\n        disabledOptions: [\"다른 침대 추가\"],\n        useValidation: false,\n        onChange: function onChange(e) {\n          return setActivedBedOptions([].concat(_toConsumableArray(activedBedOptions), [e.target.value]));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(RegisterRoomBedTypes, \"RJg7gzcDGR4UdUwHq6pW1huvykA=\", false, function () {\n  return [useDispatch];\n});\n\n_c2 = RegisterRoomBedTypes;\nexport default RegisterRoomBedTypes;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"RegisterRoomBedTypes\");","map":{"version":3,"sources":["D:/SUNGHO/DEV/Next Class/next-airbnb/components/room/register/RegisterRoomBedTypes.tsx"],"names":["React","useMemo","useState","useDispatch","styled","bedTypes","registerRoomActions","palette","Button","Counter","Selector","Container","li","gray_dd","gray_48","gray_76","RegisterRoomBedTypes","bedroom","opened","setOpened","initialBedOptions","beds","map","bed","type","activedBedOptions","setActivedBedOptions","lastBedOptions","filter","bedType","includes","console","log","totalBedsCount","total","forEach","count","toggleOpened","onChangeBedTypeCount","value","dispatch","setBedTypeCount","bedroomId","id","bedsText","texts","join","find","e","target"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { bedTypes } from \"../../../lib/staticData\";\r\nimport { registerRoomActions } from \"../../../store/registerRoom\";\r\nimport palette from \"../../../styles/palette\";\r\nimport { BedType } from \"../../../types/room\";\r\nimport Button from \"../../common/Button\";\r\nimport Counter from \"../../common/Counter\";\r\nimport Selector from \"../../common/Selector\";\r\n\r\nconst Container = styled.li`\r\n  width: 100%;\r\n  padding: 28px 0;\r\n  border-top: 1px solid ${palette.gray_dd};\r\n  &:last-child {\r\n    border-bottom: 1px solid ${palette.gray_dd};\r\n  }\r\n  .register-room-bed-type-top {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n  .register-room-bed-type-bedroom {\r\n    font-size: 19px;\r\n    color: ${palette.gray_48};\r\n  }\r\n  .register-room-bed-type-selector-wrapper {\r\n    margin-top: 28px;\r\n    width: 320px;\r\n  }\r\n  .register-room-bed-type-counters {\r\n    width: 320px;\r\n    margin-top: 28px;\r\n  }\r\n  .register-room-bed-type-counter {\r\n    width: 290px;\r\n    margin-bottom: 18px;\r\n  }\r\n  \r\n  .register-room-bed-type-bedroom-counts {\r\n    font-size: 19px;\r\n    color: ${palette.gray_76};\r\n    max-width: 240px;\r\n    word-break: keep-all;\r\n  }\r\n`;\r\n\r\ninterface IProps {\r\n    bedroom: { id: number; beds: { type: BedType; count: number }[] };\r\n}\r\n\r\nconst RegisterRoomBedTypes: React.FC<IProps> = ({ bedroom }) => {\r\n    const [opened, setOpened] = useState(false);\r\n    //* 선택된 침대 옵션들\r\n    const initialBedOptions = bedroom.beds.map((bed) => bed.type);\r\n\r\n    //* 선택된 침대 옵션들\r\n    /*\r\n      activedBedOptions는 useState를 사용 > 페이지 다시 접근 시 초기화\r\n      초기화를 막기위해 redux에 있는 값을 초기값으로 설정\r\n    */\r\n    const [activedBedOptions, setActivedBedOptions] = useState<BedType[]>(\r\n      initialBedOptions\r\n    );\r\n    //* 남은 침대 옵션들\r\n    // 옵션에서 변경이 일어나면 클릭한 옵션을 셀렉트에서 제거한다.\r\n    const lastBedOptions = useMemo(() => {\r\n      return bedTypes.filter((bedType) => !activedBedOptions.includes(bedType));\r\n    }, [activedBedOptions, bedroom]);\r\n\r\n    console.log(\"activedBedOptions\");\r\n    console.log(activedBedOptions);\r\n\r\n    //* 침대 개수 총합\r\n    const totalBedsCount = useMemo(() => {\r\n        let total = 0;\r\n        bedroom.beds.forEach((bed) => {\r\n        total += bed.count;\r\n        });\r\n        return total;\r\n    }, [bedroom]);\r\n\r\n    //* 침실 유형 열고 닫기\r\n    const toggleOpened = () => setOpened(!opened);\r\n\r\n    //* 침실 침대 갯수 변경시\r\n    const onChangeBedTypeCount = (value: number, type: BedType) =>\r\n      dispatch(\r\n        registerRoomActions.setBedTypeCount({\r\n          bedroomId: bedroom.id,\r\n          type,\r\n          count: value,\r\n        })\r\n    );\r\n\r\n    //* 침대 종류 텍스트\r\n    const bedsText = useMemo(() => {\r\n      const texts = bedroom.beds.map((bed) => `${bed.type} ${bed.count}개`);\r\n      return texts.join(\",\");\r\n    }, [bedroom]);\r\n\r\n    const dispatch = useDispatch();\r\n//styleType=\"register\" color=\"white\"\r\n    return (\r\n      <Container>\r\n        <div className=\"register-room-bed-type-top\">\r\n          <div>\r\n            <p className=\"register-room-bed-type-bedroom\">{bedroom.id}번 침실</p>\r\n            <p className=\"register-room-bed-type-bedroom-counts\">\r\n              침대 {totalBedsCount}개<br />\r\n              {bedsText}\r\n            </p>\r\n          </div>\r\n          <Button onClick={toggleOpened} styleType=\"register\" color=\"white\" width=\"161px\">\r\n            {opened && \"완료\"}\r\n            {!opened && (totalBedsCount === 0 ? \"침대 추가하기\" : \"침대 수정하기\")}\r\n          </Button>\r\n        </div>\r\n        {opened && (\r\n          <div className=\"register-room-bed-type-selector-wrapper\">\r\n            {activedBedOptions.map((type) => (\r\n              <div className=\"register-room-bed-type-counter\" key={type}>\r\n                <Counter\r\n                  label={type}\r\n                  value={\r\n                    bedroom.beds.find((bed) => bed.type === type)?.count || 0\r\n                  }\r\n                  key={type}\r\n                  onChange={(value) => {\r\n                    onChangeBedTypeCount(value, type);\r\n                  }}\r\n                />\r\n              </div>\r\n              ))}\r\n            <Selector\r\n              type=\"register\"\r\n              options={lastBedOptions}\r\n              defaultValue=\"다른 침대 추가\"\r\n              value=\"다른 침대 추가\"\r\n              disabledOptions={[\"다른 침대 추가\"]}\r\n              useValidation={false}\r\n              onChange={(e) =>\r\n                  setActivedBedOptions([\r\n                    ...activedBedOptions,\r\n                    e.target.value as BedType,\r\n                  ])\r\n              }\r\n            />\r\n          </div>\r\n        )}\r\n      </Container>\r\n    );\r\n};\r\n\r\nexport default RegisterRoomBedTypes;"]},"metadata":{},"sourceType":"module"}