{"ast":null,"code":"import _defineProperty from \"D:/SUNGHO/DEV/Next Class/next-airbnb/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"D:/SUNGHO/DEV/Next Class/next-airbnb/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n// * 초기상태\nvar initialState = {\n  //\n  largeBuildingType: null,\n  // * 건물 유형 큰 범주\n  buildingType: null,\n  // * 건물 유형\n  roomType: null,\n  // * 숙소 유형\n  isSetUpForGuest: null,\n  // * 게스트만을 위해 만들어진 숙소인가?\n  //\n  maximumGuestCount: 1,\n  // * 최대 숙박 인원\n  bedroomCount: 0,\n  // * 침실 개수\n  bedCount: 1,\n  // * 침대 개수\n  bedList: [],\n  // * 침대 유형\n  publicBedList: [],\n  // * 공용공간 침대 유형\n  //\n  bathroomCount: 1,\n  // * 욕실 개수\n  bathroomType: null,\n  // * 욕실 유형\n  //\n  country: \"\",\n  // * 국가/지역\n  city: \"\",\n  // * 시/도\n  district: \"\",\n  // * 시/군/구\n  streetAddress: \"\",\n  // * 도로명주소\n  detailAddress: \"\",\n  // * 동호수\n  postcode: \"\",\n  // * 우편번호\n  latitude: 0,\n  // * 위도\n  longitude: 0,\n  // * 경도\n  //\n  amentities: [],\n  // * 편의시설\n  //\n  conveniences: [],\n  // * 편의공간\n  //\n  photos: [],\n  // * 숙소사진\n  //\n  description: \"\",\n  // * 숙소설명\n  //\n  title: \"\",\n  // * 제목\n  //\n  price: 0 // * 숙소요금\n\n};\nvar registerRoom = createSlice({\n  name: \"registerRoom\",\n  initialState: initialState,\n  reducers: {\n    /*\r\n    \r\n        * 숙소등록하기 1단계 (건물, 숙소) Change\r\n    \r\n    */\n    // 큰 건물 유형 변경하기\n    setLargeBuildingType: function setLargeBuildingType(state, action) {\n      if (action.payload === \"\") {\n        state.largeBuildingType = null;\n      }\n\n      state.largeBuildingType = action.payload;\n      return state;\n    },\n    // * 건물 유형 변경하기.\n    setBuildingType: function setBuildingType(state, action) {\n      if (action.payload === \"\") {\n        state.buildingType = null;\n      }\n\n      state.buildingType = action.payload;\n      return state;\n    },\n    // * 숙소 유형 변경하기.\n    setRoomType: function setRoomType(state, action) {\n      state.roomType = action.payload;\n      return state;\n    },\n    // * '게스트용 숙소인지' 변경하기\n    setIsSetUpForGuest: function setIsSetUpForGuest(state, action) {\n      state.isSetUpForGuest = action.payload;\n      return state;\n    },\n    // * 최대 숙박 인원 변경하기\n    setMaximumGuestCount: function setMaximumGuestCount(state, action) {\n      state.maximumGuestCount = action.payload;\n      return state;\n    },\n\n    /*\r\n    \r\n        * 숙소등록하기 2단계 (인원, 침대, 공용공간) Change\r\n    \r\n    */\n    // * 침실 개수 변경하기\n    setBedroomCount: function setBedroomCount(state, action) {\n      var bedroomCount = action.payload;\n      var bedList = state.bedList;\n      state.bedroomCount = bedroomCount;\n\n      if (bedroomCount < bedList.length) {\n        //* 기존 침대 개수가 더 많으면 초과부분 잘라내기\n        bedList = state.bedList.slice(0, bedroomCount);\n      } else {\n        //* 변경될 침대 개수가 더 많으면 나머지 침실 채우기\n        for (var i = bedList.length + 1; i < bedroomCount + 1; i += 1) {\n          bedList.push({\n            id: i,\n            beds: []\n          });\n        }\n      }\n\n      state.bedList = bedList;\n      return state;\n    },\n    // * 최대 침대 개수 변경하기\n    setBedCount: function setBedCount(state, action) {\n      state.bedCount = action.payload;\n      return state;\n    },\n    // * 침대 유형 개수 변경하기\n    setBedTypeCount: function setBedTypeCount(state, action) {\n      var _action$payload = action.payload,\n          bedroomId = _action$payload.bedroomId,\n          type = _action$payload.type,\n          count = _action$payload.count;\n      var bedroom = state.bedList[bedroomId - 1];\n      var prevBeds = bedroom.beds;\n      var index = prevBeds.findIndex(function (bed) {\n        return bed.type === type;\n      });\n\n      if (index === -1) {\n        // * 타입이 없다면...\n        state.bedList[bedroomId - 1].beds = [].concat(_toConsumableArray(prevBeds), [{\n          type: type,\n          count: count\n        }]);\n        return state;\n      } // * 타입이 존재 한다면...\n\n\n      if (count === 0) {\n        state.bedList[bedroomId - 1].beds.splice(index, 1);\n      } else {\n        state.bedList[bedroomId - 1].beds[index].count = count;\n      }\n\n      return state;\n    },\n    // * 공용공간 침대 유형 개수 변경하기.\n    setPublicBedTypeCount: function setPublicBedTypeCount(state, action) {\n      var _action$payload2 = action.payload,\n          type = _action$payload2.type,\n          count = _action$payload2.count;\n      var index = state.publicBedList.findIndex(function (bed) {\n        return bed.type === type;\n      });\n\n      if (index === -1) {\n        // * 타입이 없다면...\n        state.publicBedList = [].concat(_toConsumableArray(state.publicBedList), [{\n          type: type,\n          count: count\n        }]);\n        return state;\n      } // * 타입이 존재 한다면...\n\n\n      if (count === 0) {\n        state.publicBedList.splice(index, 1);\n      } else {\n        state.publicBedList[index].count = count;\n      }\n\n      return state;\n    },\n\n    /*\r\n    \r\n        * 숙소등록하기 3단계 (욕실) Change\r\n    \r\n    */\n    // * 욕실 개수 변경하기.\n    setBathroomCount: function setBathroomCount(state, action) {\n      state.bathroomCount = action.payload;\n    },\n    // * 욕실 유형 변경하기.\n    setBathroomType: function setBathroomType(state, action) {\n      state.bathroomType = action.payload;\n    },\n\n    /*\r\n    \r\n        * 숙소등록하기 4단계 (위치) Change\r\n    \r\n    */\n    // * 국가 변경하기\n    setCountry: function setCountry(state, action) {\n      state.country = action.payload;\n    },\n    // * 시도 변경하기\n    setCity: function setCity(state, action) {\n      state.city = action.payload;\n    },\n    // * 시군구  변경하기\n    setDistrict: function setDistrict(state, action) {\n      state.district = action.payload;\n    },\n    // * 도로명주소 변경하기\n    setStreetAddress: function setStreetAddress(state, action) {\n      state.streetAddress = action.payload;\n    },\n    // * 동호수 변경하기\n    setDetailAddress: function setDetailAddress(state, action) {\n      state.detailAddress = action.payload;\n    },\n    // * 우편번호 변경하기\n    setPostcode: function setPostcode(state, action) {\n      state.postcode = action.payload;\n    },\n    // * 위도 변경하기\n    setLatitude: function setLatitude(state, action) {\n      state.latitude = action.payload;\n    },\n    // * 경도 변경하기\n    setLongitude: function setLongitude(state, action) {\n      state.longitude = action.payload;\n    },\n\n    /*\r\n    \r\n        * 숙소등록하기 5단계 (편의시설) Change\r\n    \r\n    */\n    // * 편의 시설 변경하기\n    setAmentities: function setAmentities(state, action) {\n      state.amentities = action.payload;\n    },\n\n    /*\r\n    \r\n        * 숙소등록하기 6단계 (편의공간) Change\r\n    \r\n    */\n    // * 편의 공간 변경하기\n    setConveniences: function setConveniences(state, action) {\n      state.conveniences = action.payload;\n    },\n\n    /*\r\n    \r\n        * 숙소등록하기 7단계 (숙소사진) photo\r\n    \r\n    */\n    // * 숙소 사진 변경하기\n    setPhotos: function setPhotos(state, action) {\n      state.photos = action.payload;\n    },\n\n    /*\r\n    \r\n        * 숙소등록하기 8단계 (숙소설명) description\r\n    \r\n    */\n    // * 숙소 설명 변경하기\n    setDescription: function setDescription(state, action) {\n      state.description = action.payload;\n    },\n\n    /*\r\n    \r\n        * 숙소등록하기 9단계 (제목) description\r\n    \r\n    */\n    // * 숙소 제목 변경하기\n    setTitle: function setTitle(state, action) {\n      state.title = action.payload;\n    },\n\n    /*\r\n    \r\n        * 숙소등록하기 10단계 (가격) Change\r\n    \r\n    */\n    // * 숙소 가격 변경하기.\n    setPrice: function setPrice(state, action) {\n      state.price = action.payload;\n    }\n  }\n});\nexport var registerRoomActions = _objectSpread({}, registerRoom.actions);\nexport default registerRoom;","map":{"version":3,"sources":["D:/SUNGHO/DEV/Next Class/next-airbnb/store/registerRoom.ts"],"names":["createSlice","initialState","largeBuildingType","buildingType","roomType","isSetUpForGuest","maximumGuestCount","bedroomCount","bedCount","bedList","publicBedList","bathroomCount","bathroomType","country","city","district","streetAddress","detailAddress","postcode","latitude","longitude","amentities","conveniences","photos","description","title","price","registerRoom","name","reducers","setLargeBuildingType","state","action","payload","setBuildingType","setRoomType","setIsSetUpForGuest","setMaximumGuestCount","setBedroomCount","length","slice","i","push","id","beds","setBedCount","setBedTypeCount","bedroomId","type","count","bedroom","prevBeds","index","findIndex","bed","splice","setPublicBedTypeCount","setBathroomCount","setBathroomType","setCountry","setCity","setDistrict","setStreetAddress","setDetailAddress","setPostcode","setLatitude","setLongitude","setAmentities","setConveniences","setPhotos","setDescription","setTitle","setPrice","registerRoomActions","actions"],"mappings":"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","sourcesContent":["import {createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { secondaryUnitBuildingTypeList } from \"../lib/staticData\";\r\nimport {BedType} from \"../types/room\";\r\n\r\ntype RegisterRoomState = {\r\n    // * 숙소등록하기 1단계 (건물, 숙소) 리덕스 설정\r\n    largeBuildingType: string | null;\r\n    buildingType: string | null;\r\n    roomType: string | null;\r\n    isSetUpForGuest: boolean | null;\r\n    \r\n    // * 숙소등록하기 2단계 (인원, 침대, 공용공간) 리덕스 설정\r\n    maximumGuestCount:number;\r\n    bedroomCount:number;\r\n    bedCount:number;\r\n    bedList:{id:number; beds:{type:BedType; count:number}[]}[];\r\n    publicBedList:{type:BedType; count:number}[];\r\n    \r\n    // * 숙소등록하기 3단계 (욕실) 리덕스 설정\r\n    bathroomCount:number;\r\n    bathroomType: \"private\" | \"public\" | null;\r\n\r\n    // * 숙소등록하기 4단계 (위치) 리덕스 설정\r\n    country:string;\r\n    city:string;\r\n    district:string;\r\n    streetAddress:string;\r\n    detailAddress:string;\r\n    postcode:string;\r\n    latitude:number;\r\n    longitude:number;\r\n\r\n    // * 숙소등록하기 5단계 (편의시설) 리덕스 설정\r\n    amentities:string[];\r\n\r\n    // * 숙소등록하기 6단계 (편의공간) 리덕스 설정\r\n    conveniences:string[];\r\n\r\n    // * 숙소등록하기 7단계 (숙소사진) 리덕스 설정\r\n    photos:string[];\r\n\r\n    // * 숙소등록하기 8단계 (숙소설명) 리덕스 설정\r\n    description:string;\r\n\r\n    // * 숙소등록하기 9단계 (제목) 리덕스 설정\r\n    title:string;\r\n\r\n    // * 숙소등록하기 10단계 (가격) 리덕스 설정\r\n    price:number;\r\n};\r\n\r\n// * 초기상태\r\nconst initialState: RegisterRoomState = {\r\n    //\r\n    largeBuildingType: null,        // * 건물 유형 큰 범주\r\n    buildingType:null,              // * 건물 유형\r\n    roomType: null,                 // * 숙소 유형\r\n    isSetUpForGuest:null,           // * 게스트만을 위해 만들어진 숙소인가?\r\n    //\r\n    maximumGuestCount:1,            // * 최대 숙박 인원\r\n    bedroomCount:0,                 // * 침실 개수\r\n    bedCount:1,                     // * 침대 개수\r\n    bedList:[],                     // * 침대 유형\r\n    publicBedList:[],               // * 공용공간 침대 유형\r\n    //\r\n    bathroomCount: 1,               // * 욕실 개수\r\n    bathroomType: null,             // * 욕실 유형\r\n    //\r\n    country:\"\",                     // * 국가/지역\r\n    city:\"\",                        // * 시/도\r\n    district:\"\",                    // * 시/군/구\r\n    streetAddress:\"\",               // * 도로명주소\r\n    detailAddress:\"\",               // * 동호수\r\n    postcode:\"\",                    // * 우편번호\r\n    latitude:0,                     // * 위도\r\n    longitude:0,                    // * 경도\r\n    //\r\n    amentities:[],                  // * 편의시설\r\n    //\r\n    conveniences:[],                // * 편의공간\r\n    //\r\n    photos:[],                      // * 숙소사진\r\n    //\r\n    description:\"\",                 // * 숙소설명\r\n    //\r\n    title:\"\",                       // * 제목\r\n    //\r\n    price:0,                        // * 숙소요금\r\n    \r\n};\r\n\r\nconst registerRoom = createSlice({\r\n    name:\"registerRoom\",\r\n    initialState,\r\n    reducers:{\r\n        /*\r\n        \r\n            * 숙소등록하기 1단계 (건물, 숙소) Change\r\n        \r\n        */\r\n        // 큰 건물 유형 변경하기\r\n        setLargeBuildingType(state, action: PayloadAction<string>) {\r\n          if(action.payload === \"\") {\r\n            state.largeBuildingType = null;\r\n          }\r\n          state.largeBuildingType = action.payload;\r\n          return state;\r\n        },\r\n        // * 건물 유형 변경하기.\r\n        setBuildingType(state, action:PayloadAction<string>){\r\n            if(action.payload===\"\"){\r\n                state.buildingType=null;\r\n            }\r\n            state.buildingType = action.payload;\r\n            return state;\r\n        },\r\n        // * 숙소 유형 변경하기.\r\n        setRoomType(state, action: PayloadAction<\"entire\" | \"private\" | \"public\">) {\r\n            state.roomType = action.payload;\r\n            return state;\r\n        },\r\n        // * '게스트용 숙소인지' 변경하기\r\n        setIsSetUpForGuest(state, action:PayloadAction<boolean>){\r\n            state.isSetUpForGuest = action.payload;\r\n            return state;\r\n        },\r\n        // * 최대 숙박 인원 변경하기\r\n        setMaximumGuestCount(state, action:PayloadAction<number>){\r\n            state.maximumGuestCount = action.payload;\r\n            return state;\r\n        },\r\n        /*\r\n        \r\n            * 숙소등록하기 2단계 (인원, 침대, 공용공간) Change\r\n        \r\n        */\r\n        // * 침실 개수 변경하기\r\n        setBedroomCount(state, action: PayloadAction<number>) {\r\n            const bedroomCount = action.payload;\r\n            let { bedList } = state;\r\n\r\n            state.bedroomCount = bedroomCount;\r\n\r\n            if (bedroomCount < bedList.length) {\r\n                //* 기존 침대 개수가 더 많으면 초과부분 잘라내기\r\n                bedList = state.bedList.slice(0, bedroomCount);\r\n            } else {\r\n                //* 변경될 침대 개수가 더 많으면 나머지 침실 채우기\r\n                for (let i = bedList.length + 1; i < bedroomCount + 1; i += 1) {\r\n                bedList.push({ id: i, beds: [] });\r\n                }\r\n            }\r\n\r\n            state.bedList = bedList;\r\n            return state;\r\n        },\r\n        // * 최대 침대 개수 변경하기\r\n        setBedCount(state, action:PayloadAction<number>){\r\n            state.bedCount = action.payload;\r\n            return state;\r\n        },\r\n        // * 침대 유형 개수 변경하기\r\n        setBedTypeCount(state, action:PayloadAction<{bedroomId:number; type:BedType; count:number}>){\r\n            const {bedroomId, type, count} = action.payload;\r\n            const bedroom = state.bedList[bedroomId - 1];\r\n            const prevBeds = bedroom.beds;\r\n            const index = prevBeds.findIndex((bed) => bed.type === type);\r\n\r\n            if(index === -1){\r\n                // * 타입이 없다면...\r\n                state.bedList[bedroomId - 1].beds = [...prevBeds, {type, count}];\r\n                return state;\r\n            }\r\n\r\n            // * 타입이 존재 한다면...\r\n            if(count === 0){\r\n                state.bedList[bedroomId - 1].beds.splice(index, 1);\r\n            }else{\r\n                state.bedList[bedroomId - 1].beds[index].count = count;\r\n            }\r\n            return state;\r\n        },\r\n        // * 공용공간 침대 유형 개수 변경하기.\r\n        setPublicBedTypeCount(state, action:PayloadAction<{type:BedType; count:number}>){\r\n            const {type, count} = action.payload;\r\n\r\n            const index=state.publicBedList.findIndex((bed)=>bed.type===type);\r\n            if(index === -1){\r\n                // * 타입이 없다면...\r\n                state.publicBedList = [...state.publicBedList, {type, count}];\r\n                return state;\r\n            }\r\n\r\n            // * 타입이 존재 한다면...\r\n            if(count === 0){\r\n                state.publicBedList.splice(index, 1);\r\n            }else{\r\n                state.publicBedList[index].count = count;\r\n            }\r\n            return state;\r\n        },\r\n        /*\r\n        \r\n            * 숙소등록하기 3단계 (욕실) Change\r\n        \r\n        */\r\n        // * 욕실 개수 변경하기.\r\n        setBathroomCount(state, action:PayloadAction<number>){\r\n            state.bathroomCount = action.payload;\r\n        },\r\n        // * 욕실 유형 변경하기.\r\n        setBathroomType(state, action:PayloadAction<\"private\" | \"public\">){\r\n            state.bathroomType = action.payload;\r\n        },\r\n        /*\r\n        \r\n            * 숙소등록하기 4단계 (위치) Change\r\n        \r\n        */\r\n       // * 국가 변경하기\r\n        setCountry(state, action: PayloadAction<string>) {\r\n            state.country = action.payload;\r\n        },\r\n       // * 시도 변경하기\r\n        setCity(state, action: PayloadAction<string>) {\r\n            state.city = action.payload;\r\n        },\r\n       // * 시군구  변경하기\r\n        setDistrict(state, action: PayloadAction<string>) {\r\n            state.district = action.payload;\r\n        },\r\n       // * 도로명주소 변경하기\r\n        setStreetAddress(state, action: PayloadAction<string>) {\r\n            state.streetAddress = action.payload;\r\n        },\r\n       // * 동호수 변경하기\r\n        setDetailAddress(state, action: PayloadAction<string>) {\r\n            state.detailAddress = action.payload;\r\n        },\r\n       // * 우편번호 변경하기\r\n        setPostcode(state, action: PayloadAction<string>) {\r\n            state.postcode = action.payload;\r\n        },\r\n       // * 위도 변경하기\r\n        setLatitude(state, action: PayloadAction<number>) {\r\n            state.latitude = action.payload;\r\n        },\r\n       // * 경도 변경하기\r\n        setLongitude(state, action: PayloadAction<number>) {\r\n            state.longitude = action.payload;\r\n        },\r\n        /*\r\n        \r\n            * 숙소등록하기 5단계 (편의시설) Change\r\n        \r\n        */\r\n       // * 편의 시설 변경하기\r\n        setAmentities(state, action: PayloadAction<string[]>) {\r\n            state.amentities = action.payload;\r\n        },\r\n        /*\r\n        \r\n            * 숙소등록하기 6단계 (편의공간) Change\r\n        \r\n        */\r\n        // * 편의 공간 변경하기\r\n        setConveniences(state, action: PayloadAction<string[]>) {\r\n            state.conveniences = action.payload;\r\n        },\r\n        /*\r\n        \r\n            * 숙소등록하기 7단계 (숙소사진) photo\r\n        \r\n        */\r\n        // * 숙소 사진 변경하기\r\n        setPhotos(state, action: PayloadAction<string[]>) {\r\n            state.photos = action.payload;\r\n        },\r\n        /*\r\n        \r\n            * 숙소등록하기 8단계 (숙소설명) description\r\n        \r\n        */\r\n        // * 숙소 설명 변경하기\r\n        setDescription(state, action: PayloadAction<string>) {\r\n            state.description = action.payload;\r\n        },\r\n        /*\r\n        \r\n            * 숙소등록하기 9단계 (제목) description\r\n        \r\n        */\r\n        // * 숙소 제목 변경하기\r\n        setTitle(state, action: PayloadAction<string>) {\r\n            state.title = action.payload;\r\n        },\r\n        /*\r\n        \r\n            * 숙소등록하기 10단계 (가격) Change\r\n        \r\n        */\r\n        // * 숙소 가격 변경하기.\r\n        setPrice(state, action:PayloadAction<number>){\r\n            state.price = action.payload;\r\n        },\r\n\r\n\r\n\r\n\r\n\r\n\r\n    },\r\n});\r\n\r\n\r\n\r\n\r\nexport const registerRoomActions={...registerRoom.actions};\r\n\r\nexport default registerRoom;"]},"metadata":{},"sourceType":"module"}