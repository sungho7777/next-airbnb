{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\SUNGHO\\\\DEV\\\\Next Class\\\\next-airbnb\\\\components\\\\room\\\\register\\\\RegisterRoomBedTypes.tsx\";\nimport React, { useMemo, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { bedTypes } from \"../../../lib/staticData\";\nimport { registerRoomActions } from \"../../../store/registerRoom\";\nimport palette from \"../../../styles/palette\";\nimport Button from \"../../common/Button\";\nimport Counter from \"../../common/Counter\";\nimport Selector from \"../../common/Selector\";\nconst Container = styled.li.withConfig({\n  displayName: \"RegisterRoomBedTypes__Container\",\n  componentId: \"e0v542-0\"\n})([\"width:100%;padding:28px 0;border-top:1px solid \", \";&:last-child{border-bottom:1px solid \", \";}.register-room-bed-type-top{display:flex;justify-content:space-between;}.register-room-bed-type-bedroom{font-size:19px;color:\", \";}.register-room-public-bed-type-counters{width:320px;margin-top:28px;}.register-room-bed-type-selector-wrapper{margin-top:28px;width:320px;}.register-room-bed-type-counters{width:320px;margin-top:28px;}.register-room-bed-type-counter{width:290px;margin-bottom:18px;}.register-room-bed-type-bedroom-counts{font-size:19px;color:\", \";max-width:240px;word-break:keep-all;}\"], palette.gray_dd, palette.gray_dd, palette.gray_48, palette.gray_76);\n\nconst RegisterRoomBedTypes = ({\n  bedroom\n}) => {\n  const {\n    0: opened,\n    1: setOpened\n  } = useState(false);\n  const initialBedOptions = bedroom.beds.map(bed => bed.type); // * 선택된 침대 옵션들\n\n  const {\n    0: activedBedOptions,\n    1: setActivedBedOptions\n  } = useState(initialBedOptions); // * 남은 침대 옵션들\n\n  const lastBedOptions = useMemo(() => {\n    return bedTypes.filter(bedType => !activedBedOptions.includes(bedType));\n  }, [activedBedOptions, bedroom]); // * 침대 개수 총합\n\n  const totalBedsCount = useMemo(() => {\n    let total = 0;\n    bedroom.beds.forEach(bed => {\n      total += bed.count;\n    });\n    return total;\n  }, [bedroom]); //* 침실 유형 열고 닫기\n\n  const toggleOpened = () => setOpened(!opened); //* 침실 침대 갯수 변경시\n\n\n  const onChangeBedTypeCount = (value, type) => dispatch(registerRoomActions.setBedTypeCount({\n    bedroomId: bedroom.id,\n    type,\n    count: value\n  })); // * 침대 종류 텍스트\n\n\n  const bedsText = useMemo(() => {\n    const texts = bedroom.beds.map(bed => `${bed.type} ${bed.count} 개`);\n    return texts.join(\",\");\n  }, [bedroom]);\n  const dispatch = useDispatch();\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register-room-bed-type-top\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"register-room-bed-type-bedroom\",\n          children: [bedroom.id, \" \\uBC88 \\uCE68\\uC2E4\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"register-room-bed-type-bedroom-counts\",\n          children: [\"\\uCE68\\uB300 \", totalBedsCount, \"\\uAC1C \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 46\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: bedsText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: toggleOpened,\n        styleType: \"register\",\n        color: \"white\",\n        width: \"161px\",\n        children: [opened && \"완료\", !opened && (totalBedsCount === 0 ? \"침대 추가하기\" : \"침대 수정하기\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), opened && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register-room-bed-type-counters\",\n      children: [activedBedOptions.map(type => {\n        var _bedroom$beds$find;\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"register-room-bed-type-counter\",\n          children: /*#__PURE__*/_jsxDEV(Counter, {\n            label: type,\n            value: ((_bedroom$beds$find = bedroom.beds.find(bed => bed.type === type)) === null || _bedroom$beds$find === void 0 ? void 0 : _bedroom$beds$find.count) || 0,\n            onChange: value => {\n              onChangeBedTypeCount(value, type);\n            }\n          }, type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this)\n        }, type, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(Selector, {\n        type: \"register\",\n        options: lastBedOptions,\n        defaultValue: \"\\uB2E4\\uB978 \\uCE68\\uB300 \\uCD94\\uAC00\",\n        value: \"\\uB2E4\\uB978 \\uCE68\\uB300 \\uCD94\\uAC00\",\n        disabledOptions: [\"다른 침대 추가\"],\n        useValidation: false,\n        onChange: e => setActivedBedOptions([...activedBedOptions, e.target.value])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n\nexport default RegisterRoomBedTypes;","map":{"version":3,"sources":["D:/SUNGHO/DEV/Next Class/next-airbnb/components/room/register/RegisterRoomBedTypes.tsx"],"names":["React","useMemo","useState","useDispatch","styled","bedTypes","registerRoomActions","palette","Button","Counter","Selector","Container","li","gray_dd","gray_48","gray_76","RegisterRoomBedTypes","bedroom","opened","setOpened","initialBedOptions","beds","map","bed","type","activedBedOptions","setActivedBedOptions","lastBedOptions","filter","bedType","includes","totalBedsCount","total","forEach","count","toggleOpened","onChangeBedTypeCount","value","dispatch","setBedTypeCount","bedroomId","id","bedsText","texts","join","find","e","target"],"mappings":"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","sourcesContent":["import React, {useMemo, useState} from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { bedTypes } from \"../../../lib/staticData\";\r\nimport {useSelector} from \"../../../store\";\r\nimport { registerRoomActions } from \"../../../store/registerRoom\";\r\nimport palette from \"../../../styles/palette\";\r\nimport {BedType} from \"../../../types/room\";\r\nimport Button from \"../../common/Button\";\r\nimport Counter from \"../../common/Counter\";\r\nimport Selector from \"../../common/Selector\";\r\n\r\nconst Container = styled.li`\r\n  width: 100%;\r\n  padding: 28px 0;\r\n  border-top: 1px solid ${palette.gray_dd};\r\n  &:last-child {\r\n    border-bottom: 1px solid ${palette.gray_dd};\r\n  }\r\n  .register-room-bed-type-top {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n  .register-room-bed-type-bedroom {\r\n    font-size: 19px;\r\n    color: ${palette.gray_48};\r\n  }\r\n  .register-room-public-bed-type-counters {\r\n    width: 320px;\r\n    margin-top: 28px;\r\n  }\r\n  .register-room-bed-type-selector-wrapper {\r\n    margin-top: 28px;\r\n    width: 320px;\r\n  }\r\n  .register-room-bed-type-counters {\r\n    width: 320px;\r\n    margin-top: 28px;\r\n  }\r\n  .register-room-bed-type-counter {\r\n    width: 290px;\r\n    margin-bottom: 18px;\r\n  }\r\n  \r\n  .register-room-bed-type-bedroom-counts {\r\n    font-size: 19px;\r\n    color: ${palette.gray_76};\r\n    max-width: 240px;\r\n    word-break: keep-all;\r\n  }\r\n`;\r\n\r\ninterface IProps{\r\n    bedroom:{id:number; beds:{type:BedType; count:number}[]};\r\n}\r\n\r\nconst RegisterRoomBedTypes: React.FC<IProps> = ({bedroom})=>{\r\n    const [opened, setOpened] = useState(false);\r\n    \r\n    const initialBedOptions = bedroom.beds.map((bed) => bed.type);\r\n\r\n    // * 선택된 침대 옵션들\r\n    const [activedBedOptions, setActivedBedOptions] = useState<BedType[]>(\r\n        initialBedOptions\r\n    );\r\n\r\n    // * 남은 침대 옵션들\r\n    const lastBedOptions=useMemo(()=>{\r\n        return bedTypes.filter((bedType)=>!activedBedOptions.includes(bedType));\r\n    }, [activedBedOptions, bedroom]);\r\n\r\n    // * 침대 개수 총합\r\n    const totalBedsCount = useMemo(()=>{\r\n        let total=0;\r\n        bedroom.beds.forEach((bed)=>{\r\n            total += bed.count;\r\n        });\r\n        return total;\r\n    }, [bedroom]);\r\n\r\n    //* 침실 유형 열고 닫기\r\n    const toggleOpened = () => setOpened(!opened);\r\n\r\n    //* 침실 침대 갯수 변경시\r\n    const onChangeBedTypeCount = (value: number, type: BedType) =>\r\n      dispatch(\r\n        registerRoomActions.setBedTypeCount({\r\n          bedroomId: bedroom.id,\r\n          type,\r\n          count: value,\r\n        })\r\n    );\r\n\r\n    // * 침대 종류 텍스트\r\n    const bedsText = useMemo(()=>{\r\n        const texts=bedroom.beds.map((bed) => `${bed.type} ${bed.count} 개`);\r\n        return texts.join(\",\");\r\n    }, [bedroom]);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"register-room-bed-type-top\">\r\n                <div>\r\n                    <p className=\"register-room-bed-type-bedroom\">{bedroom.id} 번 침실</p>\r\n                    <p className=\"register-room-bed-type-bedroom-counts\">\r\n                        침대 {totalBedsCount}개 <br />\r\n                        \r\n                    </p>\r\n                    <p>{bedsText}</p>\r\n                </div>\r\n                <Button onClick={toggleOpened} styleType=\"register\" color=\"white\" width=\"161px\">\r\n                    {opened && \"완료\"}\r\n                    {!opened && (totalBedsCount === 0 ? \"침대 추가하기\" : \"침대 수정하기\")}\r\n                </Button>\r\n            </div>\r\n            \r\n            {opened && (\r\n                <div className=\"register-room-bed-type-counters\">\r\n                    {activedBedOptions.map((type)=>(\r\n                        <div className=\"register-room-bed-type-counter\" key={type}>\r\n                            <Counter\r\n                                label={type}\r\n                                value={\r\n                                    bedroom.beds.find((bed)=>bed.type === type)?.count || 0\r\n                                }\r\n                                key={type}\r\n                                onChange={(value) => {\r\n                                    onChangeBedTypeCount(value, type);\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    ))}\r\n                    <Selector\r\n                        type=\"register\"\r\n                        options={lastBedOptions}\r\n                        defaultValue=\"다른 침대 추가\"\r\n                        value=\"다른 침대 추가\"\r\n                        disabledOptions={[\"다른 침대 추가\"]}\r\n                        useValidation={false}\r\n                        onChange={(e)=>\r\n                            setActivedBedOptions([\r\n                                ...activedBedOptions,\r\n                                e.target.value as BedType,\r\n                        ])}\r\n                    />\r\n                </div>\r\n            )}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default RegisterRoomBedTypes;"]},"metadata":{},"sourceType":"module"}