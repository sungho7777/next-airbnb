{"ast":null,"code":"import jwt from \"jsonwebtoken\";\nimport Data from '../../../lib/data';\nexport default (async (req, res) => {\n  if (req.method === \"GET\") {\n    try {\n      const accessToken = req.headers.cookie;\n\n      if (!accessToken) {\n        res.statusCode = 400;\n        return res.send(\"access_token이 없습니다.\");\n      }\n\n      const userId = jwt.verify(accessToken, process.env.JWT_SECRET);\n      console.log(userId);\n      const user = Data.user.find({\n        id: Number(userId)\n      });\n\n      if (!user) {\n        res.statusCode = 404;\n        return res.send(\"해당 유저가 없습니다.\");\n      }\n\n      const userWithoutPassword = user;\n      delete userWithoutPassword.password;\n      res.statusCode = 200;\n      return res.send(userWithoutPassword);\n    } catch (error) {\n      res.statusCode = 500;\n      return res.send(error);\n    }\n  }\n\n  res.statusCode = 405;\n  return res.end();\n});","map":{"version":3,"sources":["D:/SUNGHO/DEV/Next Class/next-airbnb/pages/api/auth/me.ts"],"names":["jwt","Data","req","res","method","accessToken","headers","cookie","statusCode","send","userId","verify","process","env","JWT_SECRET","console","log","user","find","id","Number","userWithoutPassword","password","error","end"],"mappings":"AACA,OAAOA,GAAP,MAAgB,cAAhB;AAEA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AAClE,MAAID,GAAG,CAACE,MAAJ,KAAe,KAAnB,EAA0B;AACxB,QAAI;AACF,YAAMC,WAAW,GAAGH,GAAG,CAACI,OAAJ,CAAYC,MAAhC;;AACA,UAAI,CAACF,WAAL,EAAkB;AAChBF,QAAAA,GAAG,CAACK,UAAJ,GAAkB,GAAlB;AACA,eAAOL,GAAG,CAACM,IAAJ,CAAS,qBAAT,CAAP;AACD;;AACD,YAAMC,MAAM,GAAGV,GAAG,CAACW,MAAJ,CAAWN,WAAX,EAAwBO,OAAO,CAACC,GAAR,CAAYC,UAApC,CAAf;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AAEA,YAAMO,IAAI,GAAGhB,IAAI,CAACgB,IAAL,CAAUC,IAAV,CAAe;AAACC,QAAAA,EAAE,EAAEC,MAAM,CAACV,MAAD;AAAX,OAAf,CAAb;;AACA,UAAI,CAACO,IAAL,EAAW;AACTd,QAAAA,GAAG,CAACK,UAAJ,GAAiB,GAAjB;AACA,eAAOL,GAAG,CAACM,IAAJ,CAAS,cAAT,CAAP;AACD;;AAED,YAAMY,mBAA6D,GAAGJ,IAAtE;AAEA,aAAOI,mBAAmB,CAACC,QAA3B;AACAnB,MAAAA,GAAG,CAACK,UAAJ,GAAiB,GAAjB;AAEA,aAAOL,GAAG,CAACM,IAAJ,CAASY,mBAAT,CAAP;AACD,KAtBD,CAsBE,OAAOE,KAAP,EAAc;AACdpB,MAAAA,GAAG,CAACK,UAAJ,GAAiB,GAAjB;AACA,aAAOL,GAAG,CAACM,IAAJ,CAASc,KAAT,CAAP;AACD;AACF;;AACDpB,EAAAA,GAAG,CAACK,UAAJ,GAAiB,GAAjB;AAEA,SAAOL,GAAG,CAACqB,GAAJ,EAAP;AACD,CAhCD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\r\nimport jwt from \"jsonwebtoken\";\r\nimport { StoredUserType } from '../../../types/user';\r\nimport Data from '../../../lib/data';\r\n\r\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\r\n  if (req.method === \"GET\") {\r\n    try {\r\n      const accessToken = req.headers.cookie;\r\n      if (!accessToken) {\r\n        res.statusCode =  400;\r\n        return res.send(\"access_token이 없습니다.\")\r\n      }\r\n      const userId = jwt.verify(accessToken, process.env.JWT_SECRET!);\r\n\r\n      console.log(userId);\r\n\r\n      const user = Data.user.find({id: Number(userId)});\r\n      if (!user) {\r\n        res.statusCode = 404;\r\n        return res.send(\"해당 유저가 없습니다.\");\r\n      }\r\n\r\n      const userWithoutPassword: Partial<Pick<StoredUserType,\"password\">> = user;\r\n\r\n      delete userWithoutPassword.password;\r\n      res.statusCode = 200;\r\n\r\n      return res.send(userWithoutPassword);\r\n    } catch (error) {\r\n      res.statusCode = 500;\r\n      return res.send(error);      \r\n    }\r\n  }\r\n  res.statusCode = 405;\r\n\r\n  return res.end();\r\n}"]},"metadata":{},"sourceType":"module"}